PARAMVALS <-c("[0,1]","[0.1,1]","[0,1]","[0,1]","[0,1]","[0,1]")
# Number of parameter samples to take from hypercube
NUMSAMPLES<-500
# Name of function that sets up Netlogo simulation. Usually setup
NETLOGO_SETUP_FUNCTION <- "setup"
# Name of function that starts Netlogo simulation. Usually go
NETLOGO_RUN_FUNCTION <- "go"
# Simulation output measures
MEASURES<- c("tally_habitat",  "area_variance" , "tally_covenant", "covenant_variance", "fraction_bush_covenant", "conservationist_farmers",
"conservationists_variance", "covenant_farmers", "fragment_count",  "fragments_variance", "fragment_max",  "frag_max_variance",  "farmer_influence_weight", "actor_attributes_weight", "eco_feedback_weight", "iwi_influence_weight",
"council_influence_weight", "central_influence_weight", "edgedensity", "centralization", "compartmentalization", "isolates", "average_w_indegree",
"degree", "gsize", "mean_path", "entropy"
)
# Number of times the Netlogo experiment is repeated for each parameter
# set
EXPERIMENT_REPETITIONS <- 1
# Whether Netlogo metrics should be collected at each timestep
RUNMETRICS_EVERYSTEP <- "false" #I've changed this to 'false' from 'true' since some of the variables are produced only in the end /JY
# Algorithm to use to generate the hypercube (normal or optimal)
ALGORITHM<-"optimal" ##'optimal' can be very slow, but doesn't seem to be slow for us as it is now. /JY
lhc_generate_lhc_sample_netlogo(FILEPATH,PARAMETERS,PARAMVALS,NUMSAMPLES,ALGORITHM,
EXPERIMENT_REPETITIONS,RUNMETRICS_EVERYSTEP,NETLOGO_SETUP_FUNCTION,
NETLOGO_RUN_FUNCTION,MEASURES)
devtools::build()
install.packages("knitr")
devtools::build()
devtools::load_all(".")
install.packages("gplots")
devtools::load_all(".")
load("/home/kieran/Desktop/test.Rda")
parameters<-c("thresholdBindProbability","chemoThreshold","chemoUpperLinearAdjust","chemoLowerLinearAdjust","maxVCAMeffectProbabilityCutoff","vcamSlope")
measures<-c("Velocity","Displacement")
cor_calc_method=c("s")
COEFFRESULTS <- calculate_prccs_all_parameters(parameters, db_results,
measures, cor_calc_method)
db_results<-results
COEFFRESULTS <- calculate_prccs_all_parameters(parameters, db_results,
measures, cor_calc_method)
head(db_results)
COEFFRESULTS <- NULL
PARAMETERS<-parameters
k<-1
# Get coefficient set
COEFFDATA <- lhc_constructcoeff_dataset(LHCRESULTFILE, PARAMETERS[k],
PARAMETERS)
LHCRESULTFILE<-db_results
# Get coefficient set
COEFFDATA <- lhc_constructcoeff_dataset(LHCRESULTFILE, PARAMETERS[k],
PARAMETERS)
COEFFDATA
# Retrieve parameter result
COEFFPARAMCOL <- LHCRESULTFILE[, PARAMETERS[k]]
COEFFPARAMCOL
# Calculate coefficients
COEFFRESULTS <- rbind(COEFFRESULTS, calculate_prcc_for_all_measures(
MEASURES, COEFFPARAMCOL, COEFFDATA, LHCRESULTFILE, cor_calc_method))
MEASURES<-measures
# Calculate coefficients
COEFFRESULTS <- rbind(COEFFRESULTS, calculate_prcc_for_all_measures(
MEASURES, COEFFPARAMCOL, COEFFDATA, LHCRESULTFILE, cor_calc_method))
PARAM_RESULTS <- NULL
l<-1
COEFFMEASURERESULT <- LHCRESULTFILE[, MEASURES[l]]
COEFFMEASURERESULT
PARAMCOEFF <- pcor.test(COEFFPARAMCOL, COEFFMEASURERESULT,
COEFFDATA, calc_method=cor_calc_method, use=prcc_method)
prcc_method="mat"
PARAMCOEFF <- pcor.test(COEFFPARAMCOL, COEFFMEASURERESULT,
COEFFDATA, calc_method=cor_calc_method, use=prcc_method)
load("/home/kieran/Desktop/test.Rda")
db_results<-results
cor_calc_method=c("s")
message("Generating Partial Rank Correlation Coefficients (lhc_generatePRCoEffs)")
COEFFRESULTS <- calculate_prccs_all_parameters(parameters, db_results,
measures, cor_calc_method)
COEFFRESULTS <- NULL
# Get coefficient set
COEFFDATA <- lhc_constructcoeff_dataset(LHCRESULTFILE, PARAMETERS[k],
PARAMETERS)
# Retrieve parameter result
COEFFPARAMCOL <- LHCRESULTFILE[, PARAMETERS[k]]
# Calculate coefficients
COEFFRESULTS <- rbind(COEFFRESULTS, calculate_prcc_for_all_measures(
MEASURES, COEFFPARAMCOL, COEFFDATA, LHCRESULTFILE, cor_calc_method))
PARAM_RESULTS <- NULL
l<-1
COEFFMEASURERESULT <- LHCRESULTFILE[, MEASURES[l]]
PARAMCOEFF <- pcor.test(COEFFPARAMCOL, COEFFMEASURERESULT,
COEFFDATA, calc_method=cor_calc_method, use=prcc_method)
COEFFPARAMCOL
as.numeric(COEFFPARAMCOL)
COEFFMEASURERESULT
PARAMCOEFF <- pcor.test(as.numeric(COEFFPARAMCOL), as.numeric(COEFFMEASURERESULT),
COEFFDATA, calc_method=cor_calc_method, use=prcc_method)
COEFFDATA
as.numeric(COEFFDATA)
PARAMCOEFF <- pcor.test(COEFFPARAMCOL, COEFFMEASURERESULT,
COEFFDATA, calc_method=cor_calc_method, use=prcc_method)
db_results
COEFFRESULTS <- NULL
# Get coefficient set
COEFFDATA <- lhc_constructcoeff_dataset(LHCRESULTFILE, PARAMETERS[k],
PARAMETERS)
COEFFDATA
LHCRESULTFILE<-db_results
coeff_data <- NULL
coeff_headers <- NULL
m<-1
PARAMNAME<-PARAMETERS[1]
PARAMETERS[m] != PARAMNAME
m<-2
coeff_data <- cbind(coeff_data, LHCRESULTFILE[, PARAMETERS[m]])
coeff_data
coeff_data <- cbind(coeff_data, as.numeric(LHCRESULTFILE[, PARAMETERS[m]]))
coeff_data
coeff_data <- NULL
coeff_data <- cbind(coeff_data, as.numeric(LHCRESULTFILE[, PARAMETERS[m]]))
coeff_data
devtools::load_all(".")
# Get coefficient set
COEFFDATA <- lhc_constructcoeff_dataset(LHCRESULTFILE, PARAMETERS[k],
PARAMETERS)
COEFFDATA
# Retrieve parameter result
COEFFPARAMCOL <- LHCRESULTFILE[, PARAMETERS[k]]
COEFFPARAMCOL
# Retrieve parameter result
COEFFPARAMCOL <- as.numeric(LHCRESULTFILE[, PARAMETERS[k]])
COEFFPARAMCOL
# Calculate coefficients
COEFFRESULTS <- rbind(COEFFRESULTS, calculate_prcc_for_all_measures(
MEASURES, COEFFPARAMCOL, COEFFDATA, LHCRESULTFILE, cor_calc_method))
PARAM_RESULTS <- NULL
COEFFMEASURERESULT <- LHCRESULTFILE[, MEASURES[l]]
COEFFMEASURERESULT
COEFFMEASURERESULT <- as.numeric(LHCRESULTFILE[, MEASURES[l]])
COEFFMEASURERESULT
PARAMCOEFF <- pcor.test(COEFFPARAMCOL, COEFFMEASURERESULT,
COEFFDATA, calc_method=cor_calc_method, use=prcc_method)
PARAMCOEFF
devtools::load_all(".")
COEFFRESULTS <- calculate_prccs_all_parameters(parameters, db_results,
measures, cor_calc_method)
COEFFRESULTS
devtools::build()
devtools:::document()
devtools::build()
p<-1
m<-1
load("/home/kieran/Desktop/coeffs.Rda")
coeffs
corcoeffs<-coeffs
# Get the PRCC value for this pairing
corr_result <- corcoeffs[
p, paste(MEASURES[m], "_Estimate", sep = "")]
corr_result
# Get the PRCC value for this pairing
corr_result <- corcoeffs[
p, paste(measures[m], "_Estimate", sep = "")]
corr_result
corcoeffs
subset(corcoeffs, parameter=parameters[p] & measure=measures[m])
subset(corcoeffs, parameter==parameters[p] & measure==measures[m])
measure[m]
measures[m]
parameter[p]
parameters[p]
measures[m
]
p<-2
subset(corcoeffs, parameter==parameters[p] & measure==measures[m])
MEASURE_SCALE<-c("microns/min","microns")
subset(corcoeffs, parameter==parameters[p] & measure==measures[m],select=c(statistic_1))
# Get the PRCC value for this pairing
corr_result <- subset(corcoeffs, parameter==parameters[p] & measure==measures[m],select=c(statistic_1))
# Make filename, titles, and labels
titles <- make_graph_title(NULL, parameters[p], NULL, MEASURES[m],
MEASURE_SCALE[m],corr_result, TIMEPOINTSCALE)
# Make filename, titles, and labels
titles <- make_graph_title(NULL, parameters[p], NULL, MEASURES[m],
MEASURE_SCALE[m],as.numeric(corr_result), TIMEPOINTSCALE)
titles
db_results
# Create graphs
output_ggplot_graph(titles$file, OUTPUT_TYPE,
make_lhc_plot(db_result, titles))
OUTPUT_TYPE = c("PDF")
# Create graphs
output_ggplot_graph(titles$file, OUTPUT_TYPE,
make_lhc_plot(db_result, titles))
# Create graphs
output_ggplot_graph(titles$file, OUTPUT_TYPE,
make_lhc_plot(db_results, titles))
output_directory<-"/home/kieran/Desktop"
# Make filename, titles, and labels
titles <- make_graph_title(output_directory, parameters[p], NULL, MEASURES[m],
MEASURE_SCALE[m],as.numeric(corr_result), TIMEPOINTSCALE)
title
titles
# Filter the data to plot
data_to_plot <- data.frame(lhcresult[, PARAMETERS[p]],
lhcresult[, MEASURES[m]])
head(db_results)
# Create graphs
output_ggplot_graph(titles$file, OUTPUT_TYPE,
make_lhc_plot(db_results, titles))
db_results[,2]
a<-as.data.frame(db_results)
a[,2]
head(db_results)
make_lhc_plot <- function(data_to_plot, titles) {
output_graph <- ggplot(data_to_plot,
aes(x = data_to_plot[, 1],
y = data_to_plot[, 2])) +
geom_point(size = 0.5) +
scale_y_continuous(limits = c(
floor(min(as.numeric(data_to_plot[,2]))), ceiling(max(as.numeric(data_to_plot[, 2]))))) +
labs(x = titles$xlabel, y = titles$ylabel,
title = titles$title, subtitle = titles$sub_title) +
theme(axis.title = element_text(size = 7),
axis.text = element_text(size = 7),
plot.title = element_text(size = 9, hjust = 0.5),
plot.subtitle = element_text(size = 8, hjust = 0.5))
return(output_graph)
}
# Create graphs
output_ggplot_graph(titles$file, OUTPUT_TYPE,
make_lhc_plot(db_results, titles))
library(ggplot2)
# Create graphs
output_ggplot_graph(titles$file, OUTPUT_TYPE,
make_lhc_plot(db_results, titles))
devtools::load_all(".")
# Filter the data to plot
data_to_plot <- data.frame(db_results[, parameters[p]],
db_results[, measures[m]])
devtools::load_all(".")
# Create graphs
output_ggplot_graph(titles$file, OUTPUT_TYPE,
make_lhc_plot(db_results, titles))
load("/home/kieran/Desktop/coeffs.Rda")
load("/home/kieran/Desktop/test.Rda")
coecoeffs<-coeffs
db_results<-results
message ("Generating output graphs for LHC Parameter Analysis")
p<-2
m<-1
# Get the PRCC value for this pairing
corr_result <- subset(corcoeffs, parameter==parameters[p] & measure==measures[m],select=c(statistic_1))
corcoeffs<-coeffs
# Get the PRCC value for this pairing
corr_result <- subset(corcoeffs, parameter==parameters[p] & measure==measures[m],select=c(statistic_1))
parameters<-c("thresholdBindProbability","chemoThreshold")
measures<-c("Velocity","Displacement")
# Get the PRCC value for this pairing
corr_result <- subset(corcoeffs, parameter==parameters[p] & measure==measures[m],select=c(statistic_1))
# Make filename, titles, and labels
titles <- make_graph_title(output_directory, parameters[p], NULL, MEASURES[m],
MEASURE_SCALE[m],as.numeric(corr_result), TIMEPOINTSCALE)
devtools::load_all(".")
# Make filename, titles, and labels
titles <- make_graph_title(output_directory, parameters[p], NULL, MEASURES[m],
MEASURE_SCALE[m],as.numeric(corr_result), TIMEPOINTSCALE)
MEASURE_SCALE<-c("microns/min","microns")
# Make filename, titles, and labels
titles <- make_graph_title(output_directory, parameters[p], NULL, MEASURES[m],
MEASURE_SCALE[m],as.numeric(corr_result), TIMEPOINTSCALE)
output_directory<-"/home/kieran/Desktop"
# Make filename, titles, and labels
titles <- make_graph_title(output_directory, parameters[p], NULL, MEASURES[m],
MEASURE_SCALE[m],as.numeric(corr_result), TIMEPOINTSCALE)
MEASURES<-measures
# Make filename, titles, and labels
titles <- make_graph_title(output_directory, parameters[p], NULL, measures[m],
MEASURE_SCALE[m],as.numeric(corr_result), TIMEPOINTSCALE)
titles
# Filter the data to plot
data_to_plot <- data.frame(db_results[, parameters[p]],
db_results[, measures[m]])
data_to_plot
# Create graphs
output_ggplot_graph(titles$file, OUTPUT_TYPE,
make_lhc_plot(data_to_plot, titles))
OUTPUT_TYPE = c("PDF")
# Create graphs
output_ggplot_graph(titles$file, OUTPUT_TYPE,
make_lhc_plot(data_to_plot, titles))
data_to_plot
data_to_plot[,2]
min(data_to_plot[,2])
min(as.numeric(data_to_plot[,2]))
min(data_to_plot[,2])
data_to_plot[,2]
# Filter the data to plot
data_to_plot <- cbind(db_results[, parameters[p]],
db_results[, measures[m]])
data_to_plot[,2]
as.numeric(data_to_plot[,2])
min(as.numeric(data_to_plot[,2]))
devtools::load_all(".")
# Create graphs
output_ggplot_graph(titles$file, OUTPUT_TYPE,
make_lhc_plot(data_to_plot, titles))
# Filter the data to plot
data_to_plot <- data.frame(as.numeric(db_results[, parameters[p]]),
as.numeric(db_results[, measures[m]]))
# Create graphs
output_ggplot_graph(titles$file, OUTPUT_TYPE,
make_lhc_plot(data_to_plot, titles))
message ("Generating output graphs for LHC Parameter Analysis")
# CREATE A GRAPH FOR EACH PARAMETER, FOR EACH MEASURE
for (p in 1:length(parameters)) {
for (m in 1:length(measuers)) {
# Get the PRCC value for this pairing
corr_result <- subset(corcoeffs, parameter==parameters[p] & measure==measures[m],select=c(statistic_1))
# Make filename, titles, and labels
titles <- make_graph_title(output_directory, parameters[p], NULL, measures[m],
MEASURE_SCALE[m],as.numeric(corr_result), TIMEPOINTSCALE)
# Filter the data to plot
data_to_plot <- data.frame(as.numeric(db_results[, parameters[p]]),
as.numeric(db_results[, measures[m]]))
# Create graphs
output_ggplot_graph(titles$file, OUTPUT_TYPE,
make_lhc_plot(data_to_plot, titles))
}
}
message("LHC Graphs Complete")
message ("Generating output graphs for LHC Parameter Analysis")
# CREATE A GRAPH FOR EACH PARAMETER, FOR EACH MEASURE
for (p in 1:length(parameters)) {
for (m in 1:length(measures)) {
# Get the PRCC value for this pairing
corr_result <- subset(corcoeffs, parameter==parameters[p] & measure==measures[m],select=c(statistic_1))
# Make filename, titles, and labels
titles <- make_graph_title(output_directory, parameters[p], NULL, measures[m],
MEASURE_SCALE[m],as.numeric(corr_result), TIMEPOINTSCALE)
# Filter the data to plot
data_to_plot <- data.frame(as.numeric(db_results[, parameters[p]]),
as.numeric(db_results[, measures[m]]))
# Create graphs
output_ggplot_graph(titles$file, OUTPUT_TYPE,
make_lhc_plot(data_to_plot, titles))
}
}
message("LHC Graphs Complete")
devtools::document()
devtools::build()
devtools::check()
corcoeffs
# Get the PRCC value for this pairing
corr_result <- subset(corcoeffs, parameter==parameters[p] & measure==measures[m],select=c(statistic_1))
corr_result
# Get the PRCC value for this pairing
corr_result <- subset(corcoeffs, corr_result$parameter==parameters[p] & measure==measures[m],select=c(statistic_1))
corr_result
# Get the PRCC value for this pairing
corr_result <- subset(corcoeffs, corcoeffs$parameter==parameters[p] & measure==measures[m],select=c(statistic_1))
corr_result
devtools::check()
devtools::load_all(".")
FILEPATH<-"/home/kieran/Downloads/Spartan_Tutorial_Data/OAT_Spartan2_July14/OAT_Spartan2/CSV_Structured/"
PARAMETERS <- c("chemoLowerLinearAdjust", "chemoUpperLinearAdjust")
# Similar to the sampling function discussed above, there are two ways to specify
# parameter value information in the analysis. Ensure you are using the appropriate
# method, setting these to NULL if using the alternative (see comments in sampling
# function description).
# Method 1:
PMIN <- c(0.015, 0.10)
PMAX <- c(0.08, 0.50)
PINC <- c(0.005, 0.05)
PARAMVALS<-NULL
# Method 2:
#PARAMVALS <- c("0.015, 0.02, 0.025, 0.03, 0.035, 0.04, 0.045, 0.05, 0.055, 0.06,
# 0.065, 0.07,0.075, 0.08", "0.1, 0.15, 0.2, 0.25, 0.3, 0.35, 0.4, 0.45, 0.5")
#PMIN <- NULL; PMAX <- NULL; PINC <- NULL
BASELINE <- c(0.04, 0.2)
MEASURES <- c("Velocity", "Displacement")
# What each measure represents. Used in graphing results
MEASURE_SCALE <- c("microns/min", "microns")
RESULTFILENAME <- "trackedCells_Close.csv"
OUTPUTCOLSTART <- 10
OUTPUTCOLEND <- 11
ALTERNATIVEFILENAME <- NULL
# Either 1: The name of the CSV file containing all simulation output (see description
# that follows in this section) or name to give the summary file that spartan generates
CSV_FILE_NAME <- "OAT_Medians.csv"
# Number of replicate runs performed for each parameter value set
NUMRUNSPERSAMPLE <- 300
# The results of the A-Test comparisons of each parameter value against that of the
# parameters baseline value are output as a file. This sets the name of this file.
# Current versions of spartan output this to a CSV file
ATESTRESULTSFILENAME <- "EgSet_ATests.csv"
# A-Test result value either side of 0.5 at which the difference between two sets of
# results is significant
ATESTSIGLEVEL <- 0.23
oat_csv_result_file_analysis(FILEPATH, CSV_FILE_NAME, PARAMETERS, BASELINE, MEASURES, ATESTRESULTSFILENAME, PMIN, PMAX, PINC, PARAMVALS)
oat_graphATestsForSampleSize(FILEPATH, PARAMETERS, MEASURES, ATESTSIGLEVEL, ATESTRESULTSFILENAME, BASELINE, PMIN, PMAX, PINC, PARAMVALS)
devtools::load_all(".")
oat_graphATestsForSampleSize(FILEPATH, PARAMETERS, MEASURES, ATESTSIGLEVEL, ATESTRESULTSFILENAME, BASELINE, PMIN, PMAX, PINC, PARAMVALS)
devtools::load_all(".")
oat_graphATestsForSampleSize(FILEPATH, PARAMETERS, MEASURES, ATESTSIGLEVEL, ATESTRESULTSFILENAME, BASELINE, PMIN, PMAX, PINC, PARAMVALS)
devtools::load_all(".")
oat_graphATestsForSampleSize(FILEPATH, PARAMETERS, MEASURES, ATESTSIGLEVEL, ATESTRESULTSFILENAME, BASELINE, PMIN, PMAX, PINC, PARAMVALS)
devtools::load_all(".")
oat_graphATestsForSampleSize(FILEPATH, PARAMETERS, MEASURES, ATESTSIGLEVEL, ATESTRESULTSFILENAME, BASELINE, PMIN, PMAX, PINC, PARAMVALS)
devtools::load_all(".")
oat_graphATestsForSampleSize(FILEPATH, PARAMETERS, MEASURES, ATESTSIGLEVEL, ATESTRESULTSFILENAME, BASELINE, PMIN, PMAX, PINC, PARAMVALS)
is_list(PARAM_ATESTS[[PARAMETERS[PARAM]]])
is.list(PARAM_ATESTS[[PARAMETERS[PARAM]]])
devtools::load_all(".")
oat_graphATestsForSampleSize(FILEPATH, PARAMETERS, MEASURES, ATESTSIGLEVEL, ATESTRESULTSFILENAME, BASELINE, PMIN, PMAX, PINC, PARAMVALS)
devtools::load_all(".")
oat_graphATestsForSampleSize(FILEPATH, PARAMETERS, MEASURES, ATESTSIGLEVEL, ATESTRESULTSFILENAME, BASELINE, PMIN, PMAX, PINC, PARAMVALS)
devtools::load_all(".")
oat_graphATestsForSampleSize(FILEPATH, PARAMETERS, MEASURES, ATESTSIGLEVEL, ATESTRESULTSFILENAME, BASELINE, PMIN, PMAX, PINC, PARAMVALS)
devtools::build()
dataFrameReadInParameters = read.csv(file="/home/kieran/Downloads/Kieran/Kieran/parametersFittedMultipleData.csv/parametersFittedMultipleData.csv") #Read in parameters from a CSV.
fittedParameters = as.vector(dataFrameReadInParameters$x) #Take the parameters and save as a vector
names(fittedParameters) = as.vector(dataFrameReadInParameters$X) #take the names of the parameters
pars = fittedParameters
dataFrameReadInParameters = read.csv(file="/home/kieran/Downloads/Kieran/Kieran/parametersFittedMultipleData.csv") #Read in parameters from a CSV.
fittedParameters = as.vector(dataFrameReadInParameters$x) #Take the parameters and save as a vector
names(fittedParameters) = as.vector(dataFrameReadInParameters$X) #take the names of the parameters
pars = fittedParameters
FILEPATH<-"/home/kieran/Downloads/Kieran/Kieran"
PARAMETERS = names(pars) #names of the parameters
BASELINE = pars
names(BASELINE) = NULL
PMIN = 0.75 * BASELINE #50% less than parameter for minimum range
PMAX = 1.25 * BASELINE # 50% more than parsameter for maximum range
PINC = 0.01 * BASELINE
PARAMVALS = NULL
MEASURES = colnames(outDF)
MEASURE_SCALE = c("hours","cell number /dLN","cell number /dLN","cell number /dLN","cell number /dLN","cell number /dLN","cell number /dLN","pg/dLN","pg/dLN","pg/dLN")
OUTPUTFILECOLSTART = 33
OUTPUTFILECOLEND=40
ALTERNATIVEFILENAME = NULL
CSV_FILE_NAME = "Q1Model_timepoint.csv"
NUMRUNSPERSAMPLE = 1
ATESTRESULTSFILENAME = "EgSet_ATests.csv"
ATESTSIGLEVEL <- 0.23PARAMETERS = names(pars) #names of the parameters
BASELINE = pars
names(BASELINE) = NULL
PMIN = 0.75 * BASELINE #50% less than parameter for minimum range
PMAX = 1.25 * BASELINE # 50% more than parsameter for maximum range
PINC = 0.01 * BASELINE
PARAMVALS = NULL
MEASURES = colnames(outDF)
MEASURE_SCALE = c("hours","cell number /dLN","cell number /dLN","cell number /dLN","cell number /dLN","cell number /dLN","cell number /dLN","pg/dLN","pg/dLN","pg/dLN")
OUTPUTFILECOLSTART = 33
OUTPUTFILECOLEND=40
ALTERNATIVEFILENAME = NULL
CSV_FILE_NAME = "Q1Model_timepoint.csv"
NUMRUNSPERSAMPLE = 1
ATESTRESULTSFILENAME = "EgSet_ATests.csv"
ATESTSIGLEVEL <- 0.23
detools::check()
devtools::check()
install.packages("e1071")
install.packages("randomForest")
install.packages("mco")
install.packages("ggplo2")
install.packages("ggplot2")
install.packages("plotrix")
install.packages("gplots")
install.packages("lhs")
install.packages("XML")
install.packages("mlegp")
install.packages("neuralnet")
install.packages("psych")
install.packages("knitr")
install.packages("rmarkdown")
install.packages("testhat")
install.packages("testthat")
devtoools::check()
devtools::check()
devtools::check()
# Setup:
load(file.path("Robustness_result_for_test.Rda"))
load("/home/kieran/spartan/tests/testthat/Robustness_result_for_test.Rda")
# write out as CSV file so that we can feed this to function
write.csv(robustness_result_for_test,file="robustness_result.csv")
oat_plotResultDistribution(getwd(), c("chemoLowerLinearAdjust", "chemoUpperLinearAdjust"),
c("Velocity", "Displacement"), c("microns/min","microns"), "robustness_result.csv", c(0.04, 0.2), PMIN = c(0.015, 0.10), PMAX = c(0.08, 0.50), PINC = c(0.005, 0.05),
PARAMVALS = NULL)
FILEPATH<-getwd()
PARAMETERS<-c("chemoLowerLinearAdjust", "chemoUpperLinearAdjust")
MEASURES<-c("Velocity", "Displacement")
MEASURE_SCALE<-c("microns/min","microns")
CSV_FILE_NAME<-"robustness_result.csv"
BASELINE<-c(0.04, 0.2)
PMIN = c(0.015, 0.10)
PMAX = c(0.08, 0.50)
PINC = c(0.005, 0.05)
PARAMVALS = NULL
TIMEPOINTS = NULL
TIMEPOINTSCALE = NULL
output_types=c("pdf")
outliers=FALSE
devtools::check()
devtools::check_win_devel()
devtools::check_win_release()
devtools::check()
install.packages("knitr")
install.packages("knitr")
install.packages("knitr")
install.packages("knitr")
install.packages("yaml")
install.packages("yaml")
install.packages("yaml")
install.packages("yaml")
install.packages("yaml")
