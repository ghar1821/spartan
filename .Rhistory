}
graph_name <- paste(FILEPATH, "/polarPlot_", MEASURES[m],sep="")
if(!is.null(TIMEPOINTS))
graph_name<-paste(graph_name,"_",TIMEPOINTS,sep="")
# Now plot the graph:
for (o in 1:length(output_forms))  {
if (output_forms[o] == "pdf")
pdf(paste(graph_name, ".pdf", sep = ""), width = 12)
if (output_forms[o] == "png")
png(filename = paste(graph_name,".png",sep = ""), width = 800)
# Sets the size of the labels on the outside of the polar plot
par(cex.axis = 1.5)
# readjust the parameter list to align with the correct angles
#PARAM_NAMES <- c(PARAMETERS[length(PARAMETERS)],
#                 PARAMETERS[1:length(PARAMETERS) - 1])
PARAM_NAMES <- c(plot_parameters[length(plot_parameters)],
plot_parameters[1:length(plot_parameters) - 1])
# Note we use absolute values as plot goes from 0 to 1, it is the
# colour which shows if it is positive or negative
radial.plot(abs(CORCOEFFS[plot_parameters, col_head]),
angle, rp.type = "r",
lwd = 4, line.col = colours,
labels = seq(1, length(plot_parameters), by = 1),
radial.lim = c(0, 1), #range of grid circle
main = paste("Partial Rank Correlation Coefficient Values for ", MEASURES[m], sep = ""),
show.grid.labels = 2,
#put the concentric circle labels going down
show.radial.grid = TRUE,
cex.lab = 0.7,
clockwise=TRUE,
mar=c(2.1,1.1,4.1,2.1)
)
legend(-1,1, c("Positive", "Negative"), lty = 1, lwd = 1:2,
col = c("red", "blue"), cex = 0.9, pt.cex = 1)
par(xpd = TRUE)
#legend(1.5, 1, pch = as.character(c(1:length(plot_parameters))),
#       PARAM_NAMES, cex = 0.7, pt.cex = 0.5)
legend(1.5, 1, pch = "",
legend=param_legend, cex = 0.8, pt.cex = 0.8)
par(xpd = FALSE)
dev.off()
}
graph_name <- paste(FILEPATH, "/polarPlot_", MEASURES[m],sep="")
if(!is.null(TIMEPOINTS))
graph_name<-paste(graph_name,"_",TIMEPOINTS,sep="")
# Now plot the graph:
for (o in 1:length(output_forms))  {
if (output_forms[o] == "pdf")
pdf(paste(graph_name, ".pdf", sep = ""), width = 12)
if (output_forms[o] == "png")
png(filename = paste(graph_name,".png",sep = ""), width = 800)
# Sets the size of the labels on the outside of the polar plot
par(cex.axis = 1.5)
# readjust the parameter list to align with the correct angles
#PARAM_NAMES <- c(PARAMETERS[length(PARAMETERS)],
#                 PARAMETERS[1:length(PARAMETERS) - 1])
PARAM_NAMES <- c(plot_parameters[length(plot_parameters)],
plot_parameters[1:length(plot_parameters) - 1])
# Note we use absolute values as plot goes from 0 to 1, it is the
# colour which shows if it is positive or negative
radial.plot(abs(CORCOEFFS[plot_parameters, col_head]),
angle, rp.type = "r",
lwd = 4, line.col = colours,
labels = seq(1, length(plot_parameters), by = 1),
radial.lim = c(0, 1), #range of grid circle
main = paste("Partial Rank Correlation Coefficient Values for ", MEASURES[m], sep = ""),
show.grid.labels = 2,
#put the concentric circle labels going down
show.radial.grid = TRUE,
cex.lab = 0.7,
clockwise=TRUE,
mar=c(2.1,1.1,4.1,2.1)
)
legend(-2,1, c("Positive", "Negative"), lty = 1, lwd = 1:2,
col = c("red", "blue"), cex = 0.9, pt.cex = 1)
par(xpd = TRUE)
#legend(1.5, 1, pch = as.character(c(1:length(plot_parameters))),
#       PARAM_NAMES, cex = 0.7, pt.cex = 0.5)
legend(1.5, 1, pch = "",
legend=param_legend, cex = 0.8, pt.cex = 0.8)
par(xpd = FALSE)
dev.off()
}
graph_name <- paste(FILEPATH, "/polarPlot_", MEASURES[m],sep="")
if(!is.null(TIMEPOINTS))
graph_name<-paste(graph_name,"_",TIMEPOINTS,sep="")
# Now plot the graph:
for (o in 1:length(output_forms))  {
if (output_forms[o] == "pdf")
pdf(paste(graph_name, ".pdf", sep = ""), width = 12)
if (output_forms[o] == "png")
png(filename = paste(graph_name,".png",sep = ""), width = 800)
# Sets the size of the labels on the outside of the polar plot
par(cex.axis = 1.5)
# readjust the parameter list to align with the correct angles
#PARAM_NAMES <- c(PARAMETERS[length(PARAMETERS)],
#                 PARAMETERS[1:length(PARAMETERS) - 1])
PARAM_NAMES <- c(plot_parameters[length(plot_parameters)],
plot_parameters[1:length(plot_parameters) - 1])
# Note we use absolute values as plot goes from 0 to 1, it is the
# colour which shows if it is positive or negative
radial.plot(abs(CORCOEFFS[plot_parameters, col_head]),
angle, rp.type = "r",
lwd = 4, line.col = colours,
labels = seq(1, length(plot_parameters), by = 1),
radial.lim = c(0, 1), #range of grid circle
main = paste("Partial Rank Correlation Coefficient Values for ", MEASURES[m], sep = ""),
show.grid.labels = 2,
#put the concentric circle labels going down
show.radial.grid = TRUE,
cex.lab = 0.7,
clockwise=TRUE,
mar=c(2.1,1.1,4.1,2.1)
)
legend(-1.5,1, c("Positive", "Negative"), lty = 1, lwd = 1:2,
col = c("red", "blue"), cex = 0.9, pt.cex = 1)
par(xpd = TRUE)
#legend(1.5, 1, pch = as.character(c(1:length(plot_parameters))),
#       PARAM_NAMES, cex = 0.7, pt.cex = 0.5)
legend(1.5, 1, pch = "",
legend=param_legend, cex = 0.8, pt.cex = 0.8)
par(xpd = FALSE)
dev.off()
}
graph_name <- paste(FILEPATH, "/polarPlot_", MEASURES[m],sep="")
if(!is.null(TIMEPOINTS))
graph_name<-paste(graph_name,"_",TIMEPOINTS,sep="")
# Now plot the graph:
for (o in 1:length(output_forms))  {
if (output_forms[o] == "pdf")
pdf(paste(graph_name, ".pdf", sep = ""), width = 12)
if (output_forms[o] == "png")
png(filename = paste(graph_name,".png",sep = ""), width = 800)
# Sets the size of the labels on the outside of the polar plot
par(cex.axis = 1.5)
# readjust the parameter list to align with the correct angles
#PARAM_NAMES <- c(PARAMETERS[length(PARAMETERS)],
#                 PARAMETERS[1:length(PARAMETERS) - 1])
PARAM_NAMES <- c(plot_parameters[length(plot_parameters)],
plot_parameters[1:length(plot_parameters) - 1])
# Note we use absolute values as plot goes from 0 to 1, it is the
# colour which shows if it is positive or negative
radial.plot(abs(CORCOEFFS[plot_parameters, col_head]),
angle, rp.type = "r",
lwd = 4, line.col = colours,
labels = seq(1, length(plot_parameters), by = 1),
radial.lim = c(0, 1), #range of grid circle
main = paste("Partial Rank Correlation Coefficient Values for ", MEASURES[m], sep = ""),
show.grid.labels = 2,
#put the concentric circle labels going down
show.radial.grid = TRUE,
cex.lab = 0.7,
clockwise=TRUE,
mar=c(2.1,1.1,4.1,2.1)
)
legend(-1.5,1, c("Positive", "Negative"), lty = 1, lwd = 1:2,
col = c("red", "blue"), cex = 1.1, pt.cex = 1)
par(xpd = TRUE)
#legend(1.5, 1, pch = as.character(c(1:length(plot_parameters))),
#       PARAM_NAMES, cex = 0.7, pt.cex = 0.5)
legend(1.5, 1, pch = "",
legend=param_legend, cex = 0.8, pt.cex = 0.8)
par(xpd = FALSE)
dev.off()
}
graph_name <- paste(FILEPATH, "/polarPlot_", MEASURES[m],sep="")
if(!is.null(TIMEPOINTS))
graph_name<-paste(graph_name,"_",TIMEPOINTS,sep="")
# Now plot the graph:
for (o in 1:length(output_forms))  {
if (output_forms[o] == "pdf")
pdf(paste(graph_name, ".pdf", sep = ""), width = 12)
if (output_forms[o] == "png")
png(filename = paste(graph_name,".png",sep = ""), width = 800)
# Sets the size of the labels on the outside of the polar plot
par(cex.axis = 1.5)
# readjust the parameter list to align with the correct angles
#PARAM_NAMES <- c(PARAMETERS[length(PARAMETERS)],
#                 PARAMETERS[1:length(PARAMETERS) - 1])
PARAM_NAMES <- c(plot_parameters[length(plot_parameters)],
plot_parameters[1:length(plot_parameters) - 1])
# Note we use absolute values as plot goes from 0 to 1, it is the
# colour which shows if it is positive or negative
radial.plot(abs(CORCOEFFS[plot_parameters, col_head]),
angle, rp.type = "r",
lwd = 4, line.col = colours,
labels = seq(1, length(plot_parameters), by = 1),
radial.lim = c(0, 1), #range of grid circle
main = paste("Partial Rank Correlation Coefficient Values for ", MEASURES[m], sep = ""),
show.grid.labels = 2,
#put the concentric circle labels going down
show.radial.grid = TRUE,
cex.lab = 0.7,
clockwise=TRUE,
mar=c(2.1,1.1,4.1,2.1)
)
legend(-1.7,1, c("Positive", "Negative"), lty = 1, lwd = 1:2,
col = c("red", "blue"), cex = 1.1, pt.cex = 1)
par(xpd = TRUE)
#legend(1.5, 1, pch = as.character(c(1:length(plot_parameters))),
#       PARAM_NAMES, cex = 0.7, pt.cex = 0.5)
legend(1.5, 1, pch = "",
legend=param_legend, cex = 0.8, pt.cex = 0.8)
par(xpd = FALSE)
dev.off()
}
devtools::load_all(".")
lhc_polarplot(FILEPATH,PARAMETERS,MEASURES,CORCOEFFSOUTPUTFILE)
devtools::build()
graph_name <- paste(FILEPATH, "/polarPlot_", MEASURES[m],sep="")
if(!is.null(TIMEPOINTS))
graph_name<-paste(graph_name,"_",TIMEPOINTS,sep="")
# Now plot the graph:
for (o in 1:length(output_forms))  {
if (output_forms[o] == "pdf")
pdf(paste(graph_name, ".pdf", sep = ""), width = 12)
if (output_forms[o] == "png")
png(filename = paste(graph_name,".png",sep = ""), width = 800)
# Sets the size of the labels on the outside of the polar plot
par(cex.axis = 1.5)
# readjust the parameter list to align with the correct angles
#PARAM_NAMES <- c(PARAMETERS[length(PARAMETERS)],
#                 PARAMETERS[1:length(PARAMETERS) - 1])
PARAM_NAMES <- c(plot_parameters[length(plot_parameters)],
plot_parameters[1:length(plot_parameters) - 1])
# Note we use absolute values as plot goes from 0 to 1, it is the
# colour which shows if it is positive or negative
radial.plot(abs(CORCOEFFS[plot_parameters, col_head]),
angle, rp.type = "r",
lwd = 4, line.col = colours,
labels = seq(1, length(plot_parameters), by = 1),
radial.lim = c(0, 1), #range of grid circle
main = paste("Partial Rank Correlation Coefficient Values for ", MEASURES[m], sep = ""),
show.grid.labels = 2,
#put the concentric circle labels going down
show.radial.grid = TRUE,
cex.lab = 0.7,
clockwise=TRUE,
mar=c(2.1,1.1,4.1,2.1)
)
legend(-1.7,1, c("Positive", "Negative"), lty = 1, lwd = 1:2,
col = c("red", "blue"), cex = 1.1, pt.cex = 1)
par(xpd = TRUE)
#legend(1.5, 1, pch = as.character(c(1:length(plot_parameters))),
#       PARAM_NAMES, cex = 0.7, pt.cex = 0.5)
param_legend<-paste(1:length(plot_parameters),plot_parameters)
legend(1.5, 1, pch = "",
legend=param_legend, cex = 0.8, pt.cex = 0.8)
par(xpd = FALSE)
dev.off()
}
devtools::load_all(".")
lhc_polarplot(FILEPATH,PARAMETERS,MEASURES,CORCOEFFSOUTPUTFILE)
rm(list=ls())
dataFrameReadInParameters<-read.csv("/home/kja505/Downloads/forKieran_polarPlot/forKieran_polarPlot/r_dir/GEOMEAN_FINAL_PARAMETERS_FULL.csv",header=T)
> dataFrameReadInParameters<-read.csv("/home/kja505/Downloads/forKieran_polarPlot/forKieran_polarPlot/r_dir/GEOMEAN_FINAL_PARAMETERS_FULL.csv")
> fittedParameters = as.vector(dataFrameReadInParameters$x) #Take the parameters and save as a vector
> names(fittedParameters) = as.vector(dataFrameReadInParameters$X) #take the names of the parameters
> pars = fittedParameters
dataFrameReadInParameters<-read.csv("/home/kja505/Downloads/forKieran_polarPlot/forKieran_polarPlot/r_dir/GEOMEAN_FINAL_PARAMETERS_FULL.csv",header=T)
> dataFrameReadInParameters<-read.csv("/home/kja505/Downloads/forKieran_polarPlot/forKieran_polarPlot/r_dir/GEOMEAN_FINAL_PARAMETERS_FULL.csv")
> fittedParameters = as.vector(dataFrameReadInParameters$x) #Take the parameters and save as a vector
> names(fittedParameters) = as.vector(dataFrameReadInParameters$X) #take the names of the parameters
> pars = fittedParameters
dataFrameReadInParameters<-read.csv("/home/kja505/Downloads/forKieran_polarPlot/forKieran_polarPlot/r_dir/GEOMEAN_FINAL_PARAMETERS_FULL.csv")
fittedParameters = as.vector(dataFrameReadInParameters$x) #Take the parameters and save as a vector
names(fittedParameters) = as.vector(dataFrameReadInParameters$X) #take the names of the parameters
pars = fittedParameters
PARAMETERS = names(pars)
MEASURES<-c("Mo","Monoc","DC","NKi","NKa","CD8tot","IL18","IL12","IFNg")
CORCOEFFSOUTPUTFILE<-"LHC_corCoeffs_6.csv"
FILEPATH<-"/home/kja505/Downloads/forKieran_polarPlot/forKieran_polarPlot/r_dir/Geomean_LHC/LHC_SIM_RUNS"
lhc_polarplot(FILEPATH, PARAMETERS, MEASURES, CORCOEFFSOUTPUTFILE)
devtools::build()
FILEPATH<-"/home/kja505/Documents"
CORCOEFFSOUTPUTFILE<-"LHC_corCoeffs_6.csv"
PARAMETERS<-c("vMonocIL12","vDCIL12")
MEASURES
MEASURES<-c("IL12")
# Read in the file
CORCOEFFS <- read.csv(paste(FILEPATH, "/", CORCOEFFSOUTPUTFILE,
sep = ""),
header = TRUE, check.names = FALSE,
row.names = 1)
# Plot set up:
# convert 360 degrees to radians
circle_in_radians <- 6.28319
# outputs:
output_forms <- c("png", "pdf")
m<-1
# Need to exclude any parameters that are NA prior to plotting
na_corrs <- which(is.na(CORCOEFFS[,paste0(MEASURES[m],"_Estimate")]))
na_corrs
length(na_corrs)>0
plot_parameters<-PARAMETERS
length(plot_parameters)>0
degree <- circle_in_radians / length(plot_parameters)
# Create the angles at which the PARAMETERS will be shown on the
# plot, as well as the colours (blue negative, red positive)
angle <- c()
colours <- c()
# Make the header for this measure
col_head <- paste(MEASURES[m], "_Estimate",
sep = "")
col_head
i<-1
for (i in 1:length(plot_parameters))
{
angle <- c(angle, degree * i)
# Now see if the correlation is positive or negative
#if (CORCOEFFS[PARAMETERS[i], col_head] < 0)
if (CORCOEFFS[plot_parameters[i], col_head] < 0)
{
colours <- c(colours, "blue")
} else {
colours <- c(colours, "red")
}
}
par(cex.axis = 1.5)
# readjust the parameter list to align with the correct angles
#PARAM_NAMES <- c(PARAMETERS[length(PARAMETERS)],
#                 PARAMETERS[1:length(PARAMETERS) - 1])
PARAM_NAMES <- c(plot_parameters[length(plot_parameters)],
plot_parameters[1:length(plot_parameters) - 1])
PARAM_NAMES
PARAM_NAMES
plot_parameters
# readjust the parameter list to align with the correct angles
#PARAM_NAMES <- c(PARAMETERS[length(PARAMETERS)],
#                 PARAMETERS[1:length(PARAMETERS) - 1])
PARAM_NAMES <- c(plot_parameters[length(plot_parameters)],
plot_parameters[1:length(plot_parameters) - 1])
# Note we use absolute values as plot goes from 0 to 1, it is the
# colour which shows if it is positive or negative
radial.plot(abs(CORCOEFFS[plot_parameters, col_head]),
angle, rp.type = "r",
lwd = 4, line.col = colours,
labels = seq(1, length(plot_parameters), by = 1),
radial.lim = c(0, 1), #range of grid circle
main = paste("Partial Rank Correlation Coefficient Values for ", MEASURES[m], sep = ""),
show.grid.labels = 2,
#put the concentric circle labels going down
show.radial.grid = TRUE,
cex.lab = 0.7,
clockwise=FALSE,
mar=c(2.1,1.1,4.1,2.1)
)
library(spartan)
# Note we use absolute values as plot goes from 0 to 1, it is the
# colour which shows if it is positive or negative
radial.plot(abs(CORCOEFFS[plot_parameters, col_head]),
angle, rp.type = "r",
lwd = 4, line.col = colours,
labels = seq(1, length(plot_parameters), by = 1),
radial.lim = c(0, 1), #range of grid circle
main = paste("Partial Rank Correlation Coefficient Values for ", MEASURES[m], sep = ""),
show.grid.labels = 2,
#put the concentric circle labels going down
show.radial.grid = TRUE,
cex.lab = 0.7,
clockwise=FALSE,
mar=c(2.1,1.1,4.1,2.1)
)
devtools::load_all(".")
# Note we use absolute values as plot goes from 0 to 1, it is the
# colour which shows if it is positive or negative
radial.plot(abs(CORCOEFFS[plot_parameters, col_head]),
angle, rp.type = "r",
lwd = 4, line.col = colours,
labels = seq(1, length(plot_parameters), by = 1),
radial.lim = c(0, 1), #range of grid circle
main = paste("Partial Rank Correlation Coefficient Values for ", MEASURES[m], sep = ""),
show.grid.labels = 2,
#put the concentric circle labels going down
show.radial.grid = TRUE,
cex.lab = 0.7,
clockwise=FALSE,
mar=c(2.1,1.1,4.1,2.1)
)
legend(-1.7,1, c("Positive", "Negative"), lty = 1, lwd = 1:2,
col = c("red", "blue"), cex = 1.1, pt.cex = 1)
par(xpd = TRUE)
#legend(1.5, 1, pch = as.character(c(1:length(plot_parameters))),
#       PARAM_NAMES, cex = 0.7, pt.cex = 0.5)
param_legend<-paste(1:length(plot_parameters),plot_parameters)
legend(1.5, 1, pch = "",
legend=param_legend, cex = 0.8, pt.cex = 0.8)
CORCOEFFS[plot_parameters, col_head]
angle
radial.plot(abs(CORCOEFFS[plot_parameters, col_head]),
angle, rp.type = "r",
lwd = 4, line.col = colours,
labels = seq(1, length(plot_parameters), by = 1),
radial.lim = c(0, 1), #range of grid circle
main = paste("Partial Rank Correlation Coefficient Values for ", MEASURES[m], sep = ""),
show.grid.labels = 2,
#put the concentric circle labels going down
show.radial.grid = TRUE,
cex.lab = 0.7,
clockwise=FALSE,
mar=c(2.1,1.1,4.1,2.1)
)
legend(-1.7,1, c("Positive", "Negative"), lty = 1, lwd = 1:2,
col = c("red", "blue"), cex = 1.1, pt.cex = 1)
par(xpd = TRUE)
plot_parameters
col_head
plot_parameters
angle
# Read in the file
CORCOEFFS <- read.csv(paste(FILEPATH, "/", CORCOEFFSOUTPUTFILE,
sep = ""),
header = TRUE, check.names = FALSE,
row.names = 1)
CORCOEFFS
# Plot set up:
# convert 360 degrees to radians
circle_in_radians <- 6.28319
m<-1
# Need to exclude any parameters that are NA prior to plotting
na_corrs <- which(is.na(CORCOEFFS[,paste0(MEASURES[m],"_Estimate")]))
plot_parameters<-PARAMETERS
plot_parameters
degree <- circle_in_radians / length(plot_parameters)
degree
length(plot_parameters)
# Create the angles at which the PARAMETERS will be shown on the
# plot, as well as the colours (blue negative, red positive)
angle <- c()
colours <- c()
# Make the header for this measure
col_head <- paste(MEASURES[m], "_Estimate",
sep = "")
col_head
for (i in 1:length(plot_parameters))
{
angle <- c(angle, degree * i)
# Now see if the correlation is positive or negative
#if (CORCOEFFS[PARAMETERS[i], col_head] < 0)
if (CORCOEFFS[plot_parameters[i], col_head] < 0)
{
colours <- c(colours, "blue")
} else {
colours <- c(colours, "red")
}
}
angle
colours
plot_parameters
# readjust the parameter list to align with the correct angles
#PARAM_NAMES <- c(PARAMETERS[length(PARAMETERS)],
#                 PARAMETERS[1:length(PARAMETERS) - 1])
PARAM_NAMES <- c(plot_parameters[length(plot_parameters)],
plot_parameters[1:length(plot_parameters) - 1])
PARAM_NAMES
adial.plot(abs(CORCOEFFS[plot_parameters, col_head]),
angle, rp.type = "r",
lwd = 4, line.col = colours,
#labels = seq(1, length(plot_parameters), by = 1),
labels=plot_parameters,
radial.lim = c(0, 1), #range of grid circle
main = paste("Partial Rank Correlation Coefficient Values for ", MEASURES[m], sep = ""),
show.grid.labels = 2,
#put the concentric circle labels going down
show.radial.grid = TRUE,
cex.lab = 0.7,
clockwise=FALSE,
mar=c(2.1,1.1,4.1,2.1)
)
radial.plot(abs(CORCOEFFS[plot_parameters, col_head]),
angle, rp.type = "r",
lwd = 4, line.col = colours,
#labels = seq(1, length(plot_parameters), by = 1),
labels=plot_parameters,
radial.lim = c(0, 1), #range of grid circle
main = paste("Partial Rank Correlation Coefficient Values for ", MEASURES[m], sep = ""),
show.grid.labels = 2,
#put the concentric circle labels going down
show.radial.grid = TRUE,
cex.lab = 0.7,
clockwise=FALSE,
mar=c(2.1,1.1,4.1,2.1)
)
legend(-1.7,1, c("Positive", "Negative"), lty = 1, lwd = 1:2,
col = c("red", "blue"), cex = 1.1, pt.cex = 1)
par(xpd = TRUE)
radial.plot(abs(CORCOEFFS[plot_parameters, col_head]),
angle, rp.type = "r",
lwd = 4, line.col = colours,
labels = seq(1, length(plot_parameters), by = 1),
radial.lim = c(0, 1), #range of grid circle
main = paste("Partial Rank Correlation Coefficient Values for ", MEASURES[m], sep = ""),
show.grid.labels = 2,
#put the concentric circle labels going down
show.radial.grid = TRUE,
cex.lab = 0.7,
clockwise=FALSE,
mar=c(2.1,1.1,4.1,2.1)
)
legend(-1.7,1, c("Positive", "Negative"), lty = 1, lwd = 1:2,
col = c("red", "blue"), cex = 1.1, pt.cex = 1)
par(xpd = TRUE)
#legend(1.5, 1, pch = as.character(c(1:length(plot_parameters))),
#       PARAM_NAMES, cex = 0.7, pt.cex = 0.5)
param_legend<-paste(1:length(PARAM_NAMES),PARAM_NAMES)
legend(1.5, 1, pch = "",
legend=param_legend, cex = 0.8, pt.cex = 0.8)
par(xpd = FALSE)
dev.off()
devtools::load_all(".")
lhc_polarplot(FILEPATH,PARAMETERS,MEASURES,CORCOEFFSOUTPUTFILE)
devtools::build()
