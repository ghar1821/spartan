outlier_flag=NA
} else {
outlier_flag = 1
}
ggplot2::ggplot(ALLRESULTS, ggplot2::aes(x=stats::reorder(ALLRESULTS[,1],sort(as.numeric(ALLRESULTS[,1]))), y=ALLRESULTS[, MEASURE+1])) +
ggplot2::geom_boxplot(notch=TRUE, outlier.shape = outlier_flag) + ggplot2::labs(title=GRAPHTITLE,x="Parameter Value",
y = paste0(MEASURES[MEASURE], " (",MEASURE_SCALE[PARAM], ")")) +
ggplot2::theme(plot.title = ggplot2::element_text(hjust = 0.5)) +
ggplot2::stat_summary(fun.y=median, geom="point", shape=23, size=2) + ylim(0,70)
for(output in output_types)
{
ggplot2::ggsave(file.path(FILEPATH,paste0("BP_",PARAMETERS[PARAM],"_",MEASURES[MEASURE],TIMEPOINTS,".",output)))
message(paste0("Box Plots Generated and output as ",
file.path(FILEPATH,paste0("BP_",PARAMETERS[PARAM],"_",MEASURES[MEASURE],TIMEPOINTS,".",output))))
}
PARAM<-3
message(paste("Creating Output Responses Box Plot Graph for Parameter ",
PARAMETERS[PARAM], sep = ""))
# THE RESULTS OF THE OAT ANALYSIS IS IN ONE PLACE. THUS WE NEED TO
# REFER TO THE CORRECT BASELINE RESULT FOR PARAMETERS THAT ARE
# NOT BEING CHANGED SO WE USE THE VARIABLE EXP_PARAMS WHEN WE START
#A NEW VARIABLE - WE SET THE PARAMS TO THE BASELINE AND THEN ONLY
# ALTER THE ONE BEING CHANGED
EXP_PARAMS <- as.character(BASELINE)
# NOW GET THE LIST OF PARAMETER VALUES BEING EXPLORED FOR THIS
# PARAMETER. NOTE CONVERSION TO NUMBERS: GETS RID OF TRAILING
# ZEROS MADE BY SEQ
val_list <- as.numeric(prepare_parameter_value_list(PMIN, PMAX, PINC,
PARAMVALS, PARAM))
ALLRESULTS <- NULL
for (PARAMVAL in 1:length(val_list)) {
EXP_PARAMS[PARAM] <- as.character(val_list[PARAMVAL])
PARAM_RESULT <- subset_results_by_param_value_set(PARAMETERS,
RESULT, EXP_PARAMS)
VALUE_RESULT <- cbind(PARAM_RESULT[PARAMETERS[PARAM]])
# NOW ADD ALL MEASURES
for (MEASURE in 1:length(MEASURES)) {
VALUE_RESULT <- cbind(VALUE_RESULT,
PARAM_RESULT[MEASURES[MEASURE]])
}
ALLRESULTS <- rbind(ALLRESULTS, VALUE_RESULT)
}
PARAM
# NOW DO THE BOXPLOTS FOR EACH MEASURE
# BOXPLOT THE MEASURE
if (is.null(TIMEPOINTS)) {
GRAPHTITLE <- paste("Distribution of ", MEASURES[MEASURE],
" Responses \n when altering parameter ",
PARAMETERS[PARAM], sep = "")
} else {
GRAPHTITLE <- paste("Distribution of ", MEASURES[MEASURE],
" Responses \n when altering parameter ",
PARAMETERS[PARAM], " at Timepoint ",
TIMEPOINTS, " ", TIMEPOINTSCALE,
sep = "")
}
ALLRESULTS[PARAMETERS[PARAM]] <-as.factor(as.matrix(ALLRESULTS[PARAMETERS[PARAM]]))
if(!outliers)
{
outlier_flag=NA
} else {
outlier_flag = 1
}
ggplot2::ggplot(ALLRESULTS, ggplot2::aes(x=stats::reorder(ALLRESULTS[,1],sort(as.numeric(ALLRESULTS[,1]))), y=ALLRESULTS[, MEASURE+1])) +
ggplot2::geom_boxplot(notch=TRUE, outlier.shape = outlier_flag) + ggplot2::labs(title=GRAPHTITLE,x="Parameter Value",
y = paste0(MEASURES[MEASURE], " (",MEASURE_SCALE[PARAM], ")")) +
ggplot2::theme(plot.title = ggplot2::element_text(hjust = 0.5)) +
ggplot2::stat_summary(fun.y=median, geom="point", shape=23, size=2) + ylim(0,70)
for(output in output_types)
{
ggplot2::ggsave(file.path(FILEPATH,paste0("BP_",PARAMETERS[PARAM],"_",MEASURES[MEASURE],TIMEPOINTS,".",output)))
message(paste0("Box Plots Generated and output as ",
file.path(FILEPATH,paste0("BP_",PARAMETERS[PARAM],"_",MEASURES[MEASURE],TIMEPOINTS,".",output))))
}
PARAM<-4
message(paste("Creating Output Responses Box Plot Graph for Parameter ",
PARAMETERS[PARAM], sep = ""))
# THE RESULTS OF THE OAT ANALYSIS IS IN ONE PLACE. THUS WE NEED TO
# REFER TO THE CORRECT BASELINE RESULT FOR PARAMETERS THAT ARE
# NOT BEING CHANGED SO WE USE THE VARIABLE EXP_PARAMS WHEN WE START
#A NEW VARIABLE - WE SET THE PARAMS TO THE BASELINE AND THEN ONLY
# ALTER THE ONE BEING CHANGED
EXP_PARAMS <- as.character(BASELINE)
# NOW GET THE LIST OF PARAMETER VALUES BEING EXPLORED FOR THIS
# PARAMETER. NOTE CONVERSION TO NUMBERS: GETS RID OF TRAILING
# ZEROS MADE BY SEQ
val_list <- as.numeric(prepare_parameter_value_list(PMIN, PMAX, PINC,
PARAMVALS, PARAM))
ALLRESULTS <- NULL
for (PARAMVAL in 1:length(val_list)) {
EXP_PARAMS[PARAM] <- as.character(val_list[PARAMVAL])
PARAM_RESULT <- subset_results_by_param_value_set(PARAMETERS,
RESULT, EXP_PARAMS)
VALUE_RESULT <- cbind(PARAM_RESULT[PARAMETERS[PARAM]])
# NOW ADD ALL MEASURES
for (MEASURE in 1:length(MEASURES)) {
VALUE_RESULT <- cbind(VALUE_RESULT,
PARAM_RESULT[MEASURES[MEASURE]])
}
ALLRESULTS <- rbind(ALLRESULTS, VALUE_RESULT)
}
# NOW DO THE BOXPLOTS FOR EACH MEASURE
# BOXPLOT THE MEASURE
if (is.null(TIMEPOINTS)) {
GRAPHTITLE <- paste("Distribution of ", MEASURES[MEASURE],
" Responses \n when altering parameter ",
PARAMETERS[PARAM], sep = "")
} else {
GRAPHTITLE <- paste("Distribution of ", MEASURES[MEASURE],
" Responses \n when altering parameter ",
PARAMETERS[PARAM], " at Timepoint ",
TIMEPOINTS, " ", TIMEPOINTSCALE,
sep = "")
}
ALLRESULTS[PARAMETERS[PARAM]] <-as.factor(as.matrix(ALLRESULTS[PARAMETERS[PARAM]]))
if(!outliers)
{
outlier_flag=NA
} else {
outlier_flag = 1
}
ggplot2::ggplot(ALLRESULTS, ggplot2::aes(x=stats::reorder(ALLRESULTS[,1],sort(as.numeric(ALLRESULTS[,1]))), y=ALLRESULTS[, MEASURE+1])) +
ggplot2::geom_boxplot(notch=TRUE, outlier.shape = outlier_flag) + ggplot2::labs(title=GRAPHTITLE,x="Parameter Value",
y = paste0(MEASURES[MEASURE], " (",MEASURE_SCALE[PARAM], ")")) +
ggplot2::theme(plot.title = ggplot2::element_text(hjust = 0.5)) +
ggplot2::stat_summary(fun.y=median, geom="point", shape=23, size=2) + ylim(0,70)
for(output in output_types)
{
ggplot2::ggsave(file.path(FILEPATH,paste0("BP_",PARAMETERS[PARAM],"_",MEASURES[MEASURE],TIMEPOINTS,".",output)))
message(paste0("Box Plots Generated and output as ",
file.path(FILEPATH,paste0("BP_",PARAMETERS[PARAM],"_",MEASURES[MEASURE],TIMEPOINTS,".",output))))
}
PARAM<-5
message(paste("Creating Output Responses Box Plot Graph for Parameter ",
PARAMETERS[PARAM], sep = ""))
# THE RESULTS OF THE OAT ANALYSIS IS IN ONE PLACE. THUS WE NEED TO
# REFER TO THE CORRECT BASELINE RESULT FOR PARAMETERS THAT ARE
# NOT BEING CHANGED SO WE USE THE VARIABLE EXP_PARAMS WHEN WE START
#A NEW VARIABLE - WE SET THE PARAMS TO THE BASELINE AND THEN ONLY
# ALTER THE ONE BEING CHANGED
EXP_PARAMS <- as.character(BASELINE)
# NOW GET THE LIST OF PARAMETER VALUES BEING EXPLORED FOR THIS
# PARAMETER. NOTE CONVERSION TO NUMBERS: GETS RID OF TRAILING
# ZEROS MADE BY SEQ
val_list <- as.numeric(prepare_parameter_value_list(PMIN, PMAX, PINC,
PARAMVALS, PARAM))
ALLRESULTS <- NULL
for (PARAMVAL in 1:length(val_list)) {
EXP_PARAMS[PARAM] <- as.character(val_list[PARAMVAL])
PARAM_RESULT <- subset_results_by_param_value_set(PARAMETERS,
RESULT, EXP_PARAMS)
VALUE_RESULT <- cbind(PARAM_RESULT[PARAMETERS[PARAM]])
# NOW ADD ALL MEASURES
for (MEASURE in 1:length(MEASURES)) {
VALUE_RESULT <- cbind(VALUE_RESULT,
PARAM_RESULT[MEASURES[MEASURE]])
}
ALLRESULTS <- rbind(ALLRESULTS, VALUE_RESULT)
}
# NOW DO THE BOXPLOTS FOR EACH MEASURE
# BOXPLOT THE MEASURE
if (is.null(TIMEPOINTS)) {
GRAPHTITLE <- paste("Distribution of ", MEASURES[MEASURE],
" Responses \n when altering parameter ",
PARAMETERS[PARAM], sep = "")
} else {
GRAPHTITLE <- paste("Distribution of ", MEASURES[MEASURE],
" Responses \n when altering parameter ",
PARAMETERS[PARAM], " at Timepoint ",
TIMEPOINTS, " ", TIMEPOINTSCALE,
sep = "")
}
ALLRESULTS[PARAMETERS[PARAM]] <-as.factor(as.matrix(ALLRESULTS[PARAMETERS[PARAM]]))
if(!outliers)
{
outlier_flag=NA
} else {
outlier_flag = 1
}
ggplot2::ggplot(ALLRESULTS, ggplot2::aes(x=stats::reorder(ALLRESULTS[,1],sort(as.numeric(ALLRESULTS[,1]))), y=ALLRESULTS[, MEASURE+1])) +
ggplot2::geom_boxplot(notch=TRUE, outlier.shape = outlier_flag) + ggplot2::labs(title=GRAPHTITLE,x="Parameter Value",
y = paste0(MEASURES[MEASURE], " (",MEASURE_SCALE[PARAM], ")")) +
ggplot2::theme(plot.title = ggplot2::element_text(hjust = 0.5)) +
ggplot2::stat_summary(fun.y=median, geom="point", shape=23, size=2) + ylim(0,70)
for(output in output_types)
{
ggplot2::ggsave(file.path(FILEPATH,paste0("BP_",PARAMETERS[PARAM],"_",MEASURES[MEASURE],TIMEPOINTS,".",output)))
message(paste0("Box Plots Generated and output as ",
file.path(FILEPATH,paste0("BP_",PARAMETERS[PARAM],"_",MEASURES[MEASURE],TIMEPOINTS,".",output))))
}
FILPATH<-"/home/kja505/Downloads"
CORCOEFFSOUTPUTFILE<-"LHC_corCoeffs.csv"
# Read in the file
CORCOEFFS <- read.csv(paste(FILEPATH, "/", CORCOEFFSOUTPUTFILE,
sep = ""),
header = TRUE, check.names = FALSE,
row.names = 1)
FILPATH<-"/home/kja505/Downloads"
FILEPATH<-"/home/kja505/Downloads"
# Read in the file
CORCOEFFS <- read.csv(paste(FILEPATH, "/", CORCOEFFSOUTPUTFILE,
sep = ""),
header = TRUE, check.names = FALSE,
row.names = 1)
CORCOEDDS
CORCOEFFS
# Plot set up:
# convert 360 degrees to radians
circle_in_radians <- 6.28319
# outputs:
output_forms <- c("png", "pdf")
m<-1
# Need to exclude any parameters that are NA prior to plotting
na_corrs <- which(is.na(CORCOEFFS[,paste0(MEASURES[m],"_Estimate")]))
plot_parameters<-PARAMETERS
if(length(na_corrs)>0)
{
plot_parameters<-PARAMETERS[!(PARAMETERS %in% PARAMETERS[na_corrs])]
message(paste0("For Measure ",MEASURES[m],", Parameter(s) ",toString(PARAMETERS[na_corrs])," reported correlation coefficients of NA. Excluded from Plot. Check calculation"))
}
ength(plot_parameters)>0
length(plot_parameters)>0
degree <- circle_in_radians / length(plot_parameters)
# Create the angles at which the PARAMETERS will be shown on the
# plot, as well as the colours (blue negative, red positive)
angle <- c()
colours <- c()
# Make the header for this measure
col_head <- paste(MEASURES[m], "_Estimate",
sep = "")
#for (i in 1:length(PARAMETERS)) {
for (i in 1:length(plot_parameters))
angle <- c(angle, degree * i)
# Now see if the correlation is positive or negative
#if (CORCOEFFS[PARAMETERS[i], col_head] < 0)
if (CORCOEFFS[plot_parameters[i], col_head] < 0)
{
colours <- c(colours, "blue")
} else {
colours <- c(colours, "red")
}
# Sets the size of the labels on the outside of the polar plot
par(cex.axis = 1.5)
# readjust the parameter list to align with the correct angles
#PARAM_NAMES <- c(PARAMETERS[length(PARAMETERS)],
#                 PARAMETERS[1:length(PARAMETERS) - 1])
PARAM_NAMES <- c(plot_parameters[length(plot_parameters)],
plot_parameters[1:length(plot_parameters) - 1])
# Note we use absolute values as plot goes from 0 to 1, it is the
# colour which shows if it is positive or negative
radial.plot(abs(CORCOEFFS[plot_parameters, col_head]),
angle, rp.type = "r",
lwd = 4, line.col = colours,
labels = seq(1, length(plot_parameters), by = 1),
radial.lim = c(0, 1), #range of grid circle
main = paste("Partial Rank Correlation Coefficient
Values for ",
MEASURES[m], sep = ""),
show.grid.labels = 2,
#put the concentric circle labels going down
show.radial.grid = TRUE,
cex.lab = 0.7
)
col_head
CORCOEFFS[plot_parameters[i], col_head
]
i
colours <- c()
col_head <- paste(MEASURES[m], "_Estimate",
sep = "")
plot_parameters
i<-1
CORCOEFFS[,col_head]
CORCOEFFS[plot_parameters[i], col_head] < 0
colours <- c()
# Make the header for this measure
col_head <- paste(MEASURES[m], "_Estimate",
sep = "")
for (i in 1:length(plot_parameters))
angle <- c(angle, degree * i)
# Now see if the correlation is positive or negative
#if (CORCOEFFS[PARAMETERS[i], col_head] < 0)
if (CORCOEFFS[plot_parameters[i], col_head] < 0)
{
colours <- c(colours, "blue")
} else {
colours <- c(colours, "red")
}
colours
for (i in 1:length(plot_parameters))
{
angle <- c(angle, degree * i)
# Now see if the correlation is positive or negative
#if (CORCOEFFS[PARAMETERS[i], col_head] < 0)
if (CORCOEFFS[plot_parameters[i], col_head] < 0)
{
colours <- c(colours, "blue")
} else {
colours <- c(colours, "red")
}
}
colours
# Plot set up:
# convert 360 degrees to radians
circle_in_radians <- 6.28319
# outputs:
output_forms <- c("png", "pdf")
# Now create a plot for all simulation MEASURES
for (m in 1:length(MEASURES)) {
# Need to exclude any parameters that are NA prior to plotting
na_corrs <- which(is.na(CORCOEFFS[,paste0(MEASURES[m],"_Estimate")]))
plot_parameters<-PARAMETERS
if(length(na_corrs)>0)
{
plot_parameters<-PARAMETERS[!(PARAMETERS %in% PARAMETERS[na_corrs])]
message(paste0("For Measure ",MEASURES[m],", Parameter(s) ",toString(PARAMETERS[na_corrs])," reported correlation coefficients of NA. Excluded from Plot. Check calculation"))
}
# Check there are still parameters left to plot after those removed!
if(length(plot_parameters)>0)
{
degree <- circle_in_radians / length(plot_parameters)
# Create the angles at which the PARAMETERS will be shown on the
# plot, as well as the colours (blue negative, red positive)
angle <- c()
colours <- c()
# Make the header for this measure
col_head <- paste(MEASURES[m], "_Estimate",
sep = "")
#for (i in 1:length(PARAMETERS)) {
for (i in 1:length(plot_parameters))
{
angle <- c(angle, degree * i)
# Now see if the correlation is positive or negative
#if (CORCOEFFS[PARAMETERS[i], col_head] < 0)
if (CORCOEFFS[plot_parameters[i], col_head] < 0)
{
colours <- c(colours, "blue")
} else {
colours <- c(colours, "red")
}
}
graph_name <- paste(FILEPATH, "/polarPlot_", MEASURES[m],sep="")
if(!is.null(TIMEPOINTS))
graph_name<-paste(graph_name,"_",TIMEPOINTS,sep="")
# Now plot the graph:
for (o in 1:length(output_forms))  {
if (output_forms[o] == "pdf")
pdf(paste(graph_name, ".pdf", sep = ""), width = 12)
if (output_forms[o] == "png")
png(filename = paste(graph_name,".png",sep = ""), width = 800)
# Sets the size of the labels on the outside of the polar plot
par(cex.axis = 1.5)
# readjust the parameter list to align with the correct angles
#PARAM_NAMES <- c(PARAMETERS[length(PARAMETERS)],
#                 PARAMETERS[1:length(PARAMETERS) - 1])
PARAM_NAMES <- c(plot_parameters[length(plot_parameters)],
plot_parameters[1:length(plot_parameters) - 1])
# Note we use absolute values as plot goes from 0 to 1, it is the
# colour which shows if it is positive or negative
radial.plot(abs(CORCOEFFS[plot_parameters, col_head]),
angle, rp.type = "r",
lwd = 4, line.col = colours,
labels = seq(1, length(plot_parameters), by = 1),
radial.lim = c(0, 1), #range of grid circle
main = paste("Partial Rank Correlation Coefficient
Values for ",
MEASURES[m], sep = ""),
show.grid.labels = 2,
#put the concentric circle labels going down
show.radial.grid = TRUE,
cex.lab = 0.7
)
legend("topleft", 1, c("Positive", "Negative"), lty = 1, lwd = 1:2,
col = c("red", "blue"), cex = 0.9, pt.cex = 1)
par(xpd = TRUE)
legend(1, 1, pch = as.character(c(1:length(plot_parameters))),
PARAM_NAMES, cex = 0.9, pt.cex = 1)
par(xpd = FALSE)
dev.off()
}
}
}
}
devtools::load_all(".")
devtools::build()
devtools::build()
measures
measurelist<-c("A","B")
eval(measurelist)
FILEPATH<-"/home/kja505/Documents/roboSpartan/Test_Settings_and_Results"
CSV_FILE_NAME<-"omegaAlgorithmRobustnesscombinedParamsAndResults.csv"
PARAMETERS<-c("quantity","omega","cool_off_period","shadowed_avoidance_radius","illuminated_avoidance_radius")
MEASURES<-c("distanceToBeacon")
MEASURES<-c("distanceToBeacon","efficiency")
BASELINE<-c(20,25,5,0.1,0.15)
PMIN<-c(2,15,0,0.05,0.05)
PMAX<-c(28,35,10,0.15,0.3)
PINC<-c(1,1,1,0.01,0.01)
result <- read_from_csv(file.path(FILEPATH, CSV_FILE_NAME))
head(result)
# Firstly filter when the simulation results were at baseline values
baseline_result <- subset_results_by_param_value_set(PARAMETERS, result,
BASELINE)
baseline_result
BASELINE_RESULT<-baseline_result
PARAMETER_SET_RESULT<-baseline_result
# Do baseline A-Test - will always be no difference, but must be in
# result file for graphing
all_atest_scores <- perform_aTest_for_all_sim_measures(
BASELINE, baseline_result, baseline_result, MEASURES)
PARAM<-1
# Exp_params is set as baseline, then the value of the parameter
# being analysed is adjusted, thus we have a set of parameters with
# which we can subset the result file
exp_params <- as.character(BASELINE)
exp_params
# List of parameter values for this parameter
parameter_value_list <- as.numeric(
prepare_parameter_value_list(PMIN, PMAX, PINC, PARAMVALS, PARAM))
PARAMVALS<-NULL
# List of parameter values for this parameter
parameter_value_list <- as.numeric(
prepare_parameter_value_list(PMIN, PMAX, PINC, PARAMVALS, PARAM))
parameter_value_list
parameters<-PARAMETERS
parameter_index<-PARAM
baseline<-BASELINE
MEASURES<-meausres
MEASURES<-measures
param_val<-1
# Set value in param list to that we are processing
exp_params[parameter_index] <- as.character(parameter_value_list[param_val])
exp_params
parameter_result <- subset_results_by_param_value_set(parameters,
result, exp_params)
parameter_result
FILEPATH<-"/home/kja505/Documents/roboSpartan/analysis_platform/rs_analysis_2018-11-23_08_35_57"
MEASURES<-c("Velocity","Displacement")
PARAMETERS<-c("stableBindProbability","chemokineExpressionThreshold","initialChemokineExpressionValue","maxChemokineExpressionValue","maxProbabilityOfAdhesion","adhesionFactorExpressionSlope","Dummy")
NUMCURVES<-3
NUMSAMPLES<-65
OUTPUTMEASURES_TO_TTEST<-1:2
TTEST_CONF_INT<-0.95
GRAPH_FLAG=TRUE
EFASTRESULTFILENAME<-"eFAST_Results.csv"
output_types = c("png")
check_done=TRUE
# maximum number of fourier coefficients that may be retained in
# calculating the partial variances without interferences between the
# assigned frequencies
MI <- 4
# wanted no. of sample points
wanted_n <- NUMSAMPLES * length(PARAMETERS) * NUMCURVES
# OMI changed October 2018 to accommodate greater number of parameters
omi <- floor( ( (wanted_n / NUMCURVES) - 1) / (2 * MI) / length(PARAMETERS))
message("Producing eFAST Analysis (efast_run_analysis)")
devtools::load_all(".")
efast_sim_results <- read_all_curve_results(FILEPATH, GRAPHTIME, NUMCURVES,
NUMSAMPLES,  MEASURES, PARAMETERS)
GRAPHTIME<-NULL
efast_sim_results <- read_all_curve_results(FILEPATH, GRAPHTIME, NUMCURVES,
NUMSAMPLES,  MEASURES, PARAMETERS)
head(efast_sim_results)
# Sensitivity Indexes
sensitivities <- generate_sensitivity_indices(efast_sim_results, omi, MI,
MEASURES, PARAMETERS, NUMCURVES)
sensitivities
# T-Test to get P-Values against dummy parameter
message("Generating measures of statistical significance")
t_tests  <-  efast_ttest(sensitivities$si, sensitivities$range_si,
sensitivities$sti, sensitivities$range_sti,
OUTPUTMEASURES_TO_TTEST, length(PARAMETERS),
NUMCURVES, TTEST_CONF_INT)
t_tests
OUTPUTMEASURES_TO_TTEST
modelList<-c("SVM","NNET")
"NNET" %in% modelList
modelList<-c("SVM")
"NNET" %in% modelList
"NNET" !%in% modelList
"NNET" !in% modelList
!"NNET" %in% modelList
"NNET" %in% modelList
modelList
modelList<-c("SVM","RF","Ensemble")
modelList[!modelList %in% c("Ensemble")]
emulation_attrs$networkStructures<-list(c(4),c(3),c(4,3),c(4,4,3),c(4,4),c(4,3,3),c(4,4,4,3),c(4,3,2))
networkStructures<-list(c(4),c(3),c(4,3),c(4,4,3),c(4,4),c(4,3,3),c(4,4,4,3),c(4,3,2))
networkStructures
PMIN
simDataset<-reaad.csv("/home/kja505/Documents/roboSpartan/Test_Settings_and_Results/LHC_Summary_For_NNet.csv",header=T)
simDataset<-read.csv("/home/kja505/Documents/roboSpartan/Test_Settings_and_Results/LHC_Summary_For_NNet.csv",header=T)
parameters
partition_dataset(simDataset,parameters,measures,percent_train=75,percent_test=15,percent_validation=10,normalise=TRUE,sample_mins=PMIN,sample_maxes=PMAX)
partition_dataset(simDataset,parameters,measures,percent_train=75,percent_test=15,percent_validation=10,normalise=TRUE,sample_mins=rbind(PMIN),sample_maxes=rbind(PMAX))
measures<-c("distanceToBeacon","efficiency")
partition_dataset(simDataset,parameters,measures,percent_train=75,percent_test=15,percent_validation=10,normalise=TRUE,sample_mins=rbind(PMIN),sample_maxes=rbind(PMAX))
partitionedData<-partition_dataset(simDataset,parameters,measures,percent_train=75,percent_test=15,percent_validation=10,normalise=TRUE,sample_mins=rbind(PMIN),sample_maxes=rbind(PMAX))
networkStructures<-list(c(4))
algorithmSettings<-emulation_algorithm_settings(network_structures=networkStructures)
generate_requested_emulations(c("NNET"), partitionedData, parameters, measures, algorithmSettings, normalised=TRUE, output_formats=c("png"))
networkStructures<-list(c(4,3))
algorithmSettings<-emulation_algorithm_settings(network_structures=networkStructures)
generate_requested_emulations(c("NNET"), partitionedData, parameters, measures, algorithmSettings, normalised=TRUE, output_formats=c("png"))
emulation<-generate_requested_emulations(c("NNET"), partitionedData, parameters, measures, algorithmSettings, normalised=TRUE, output_formats=c("png"))
networkStructures
a<-"4,3"
a
as.numeric(a)
unlist(strsplit(a,","))
as.numeric(unlist(strsplit(a,",")))
length(as.numeric(unlist(strsplit(a,","))))
