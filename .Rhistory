}
}
# Only take the baseline for one parameter - the rest will be duplicates
baseline_result<-subset(baseline_result,baseline_result$paramOfInterest=parameters[1],select=c(baseline_result[,parameters],baseline_result[,measures]))
# Only take the baseline for one parameter - the rest will be duplicates
baseline_result<-subset(baseline_result,baseline_result$paramOfInterest==parameters[1],select=c(baseline_result[,parameters],baseline_result[,measures]))
subset(baseline_result,baseline_result$paramOfInterest==parameters[1])
baseline_result
baseline_result[,parameters]
baseline_result[,measures]
subset(baseline_result,baseline_result$paramOfInterest==parameters[1],select=c(baseline_result[,parameters],baseline_result[,measures]))
measures
# Only take the baseline for one parameter - the rest will be duplicates
baseline_result<-subset(baseline_result,baseline_result$paramOfInterest==parameters[1])
nrow(baseline_result)
# Subset the database-mined results at baseline values
# Here we have to be careful, as we could get multiple responses for the
# baseline if multiple results in the database (multiples were not found in
# original spartan)
baseline_result <- subset_results_by_param_value_set(parameters, db_results,
baseline)
apply(cbind(baseline_result$paramOfInterest),2,function(x) length(unique(x)))>1
devtools::load_all(".")
all_atest_scores <- perform_aTest_for_all_sim_measures(
baseline, baseline_result, baseline_result, measures)
all_atest_scores
p<-1
# Exp_params is set as baseline, then the value of the parameter
# being analysed is adjusted, thus we have a set of parameters with
# which we can subset the result file
exp_params <- as.character(baseline)
# List of parameter values for this parameter
parameter_value_list <- as.numeric(
prepare_parameter_value_list(PMIN, PMAX, PINC, NULL, p))
all_atest_scores <- compare_all_values_of_parameter_to_baseline (
parameter_value_list, parameters, p, baseline, db_results,
exp_params, baseline_result, measures, all_atest_scores)
all_atest_scores
devtools::build()
library(spartan)
# Directory where the example simulation results for this technique were extracted
# (i.e. the results downloaded from the website)
FILEPATH <- "/home/user/AA"
# Sample sizes (number of simulation replicates in each distribution) to be analysed
SAMPLESIZES <- c(1, 5, 50, 100, 300)
# The simulation output measures to be analysed
MEASURES <- c("Velocity", "Displacement")
# Number of distributions being compared. Default: 20, as performed by Read et al
NUMSUBSETSPERSAMPLESIZE <- 20
# Output file name containing the simulation responses.
RESULTFILENAME <- "trackedCells_Close.csv"
# Not used in this case. Useful where two result files exist (e.g.\ if tracking cells
# close and those further away, two output files could be used). Here, results in a
# second file are processed if the first is blank or does not exist. Defaults to NULL
# if not specified
ALTFILENAME <- NULL
# Notes the column in the CSV results file where the results start.
# Useful as it restricts what is read in to R, getting round potential errors where
# the first column contains a label
OUTPUTFILECOLSTART <- 10
# Last column of the output measure results
OUTPUTFILECOLEND <- 11
# Use this if simulation results are in CSV format.
# Last column of the output measure results
OUTPUTFILECOLEND <- 11
# File either A: created by method 1 of this technique, containing the median of each
# output measure of each simulation run in that subset, or B: The name of the provided
# single CSV file containing the simulation responses. So if you are using the CSV
# structured tutorial data, this fill be the name of that CSV file.
MEDIANS_SUMMARY_FILE_NAME <- "AA_SimResponses.csv"
# The results of the A-Test comparisons of the twenty subsets for each sample size
# are stored within an output file. This parameter sets the name of this file.
# Note no file extension. Current versions of spartan output to CSV files
ATESTRESULTSFILENAME <- "AA_ATest_Scores.csv"
# A summary file is created containing the maximum and median
# A-Test values for each sample size. This parameter sets the name of this file.
SUMMARYFILENAME <- "AA_ATestMaxAndMedians.csv"
# The A-Test value either side of 0.5 which should be considered a 'large difference'
# between two sets of results. Use of 0.23 was taken from the Vargha-Delaney
# publication but can be adjusted here as necessary.
LARGEDIFFINDICATOR <- 0.23
# A-Test values above 0.5 (no difference) which should be considered as small,
# medium, and large differences between two result sets. Used in the graph
# summarising all sample sizes.
SMALL <- 0.56
MEDIUM <- 0.66
LARGE <- 0.73
# Name of the graph which summarises the analysis results for all sample sizes.
# Current versions of spartan output to pdf.
GRAPHOUTPUTFILE <- "AA_ATestMaxes.pdf"
aa_summariseReplicateRuns(FILEPATH, SAMPLESIZES, MEASURES, RESULTFILENAME, ALTFILENAME, OUTPUTFILECOLSTART, OUTPUTFILECOLEND, MEDIANS_SUMMARY_FILE_NAME)
RESULTFILENAME
FILEPATH<-"/home/kja505/Downloads/Spartan_Tutorial_Data/AA_Spartan2/Folder_Structured/"
aa_summariseReplicateRuns(FILEPATH, SAMPLESIZES, MEASURES, RESULTFILENAME, ALTFILENAME, OUTPUTFILECOLSTART, OUTPUTFILECOLEND, MEDIANS_SUMMARY_FILE_NAME)
??oat_graphATestsForSampleSize
devtools::test()
# All internal functions have been tested - now we just need to check that this function produces output
load(file.path("Robustness_result_for_test.Rda"))
devtools::load_all(".")
# All internal functions have been tested - now we just need to check that this function produces output
load(file.path("Robustness_result_for_test.Rda"))
load(file.path("Robustness_result_for_test.Rda"))
load(file.path("test_baseline.Rda"))
load("Robustness_result_for_test.Rda")
load("/home/kja505/Dropbox/spartan_3.0/spartan/tests/testthat/Robustness_result_for_test.Rda")
# write out as CSV file so that we can feed this to function
write.csv(robustness_result_for_test,file="robustness_result.csv")
oat_csv_result_file_analysis(getwd(), "robustness_result.csv", c("chemoLowerLinearAdjust", "chemoUpperLinearAdjust"),
c(0.04, 0.2), c("Velocity", "Displacement"),
"EgSet_ATests.csv",
PMIN = c(0.015, 0.10), PMAX = c(0.08, 0.50), PINC = c(0.005, 0.05),
PARAMVALS = NULL, TIMEPOINTS = NULL, TIMEPOINTSCALE = NULL)
# Do we have output
expect_true(file.exists(file.path(getwd(),"EgSet_ATests.csv")))
file.exists(file.path(getwd(),"EgSet_ATests.csv"))
# read it in
result <- read.csv(file.path(getwd(),"EgSet_ATests.csv"),header=T,sep=",",check.names=F)
result
nrow(result)
ncol(result)
file.remove("robustness_result.csv")
file.remove("EgSet_ATests.csv")
load("/home/kja505/Dropbox/spartan_3.0/spartan/tests/testthat/Robustness_hour12_data.Rda")
write.csv(robustness_hour12_data,file="robustness_result_12.csv")
load("/home/kja505/Dropbox/spartan_3.0/spartan/tests/testthat/Robustness_hour36_data.Rda")
write.csv(robustness_hour36_data,file="robustness_result_36.csv")
oat_csv_result_file_analysis(getwd(), "robustness_result.csv", c("chemoLowerLinearAdjust", "chemoUpperLinearAdjust"),
c(0.04, 0.2), c("Velocity", "Displacement"),
"EgSet_ATests.csv",
PMIN = c(0.015, 0.10), PMAX = c(0.08, 0.50), PINC = c(0.005, 0.05),
PARAMVALS = NULL, TIMEPOINTS = c(12,36),
TIMEPOINTSCALE="Hours")
file.exists("EgSet_ATests_12.csv")
nrow(result)
devtools::test()
FILEPATH<-"/home/kja505/Desktop"
PARAMETERS<-c("a","b")
BASELINE<-c(5,3)
PMIN<-c(0,2)
PMAX<-c(1,4)
PINC<-c(0.1,0.5)
write_csv=TRUE
# For link with spartan database package, all samples should be returned. We can do this
# by adding each sample to a returned object
all_samples <- vector("list", length(PARAMETERS))
devtools::load_all(".")
oat_parameter_sampling(FILEPATH,PARAMETERS,BASELINE,PMIN,PMAX,PINC,write_csv=TRUE)
a<-oat_parameter_sampling(FILEPATH,PARAMETERS,BASELINE,PMIN,PMAX,PINC,write_csv=TRUE,return_sample=TRUE)
a
PARAMETERS<-c("a")
PMIN<-c(0)
PMAX<-c(1)
PINC<-c(0.1)
BASELINE<-c(0.5)
a<-oat_parameter_sampling(FILEPATH,PARAMETERS,BASELINE,PMIN,PMAX,PINC,write_csv=TRUE,return_sample=TRUE)
FILEPATH<-"/media/kja505/FreeAgent/Sensitivity_Analysis/OAT/OAT_before_fix/"
PMIN <- c(0, 0.10, 0.10, 0.015, 0.1, 0.25)
PMAX <- c(100, 0.9, 0.50, 0.08, 1.0, 5.0)
PINC <- c(10, 0.1, 0.05, 0.005, 0.05, 0.25)
PARAMETERS <- c("thresholdBindProbability", "chemoThreshold",
"chemoUpperLinearAdjust", "chemoLowerLinearAdjust",
"maxVCAMeffectProbabilityCutoff", "vcamSlope")
# The calibrated values, or baseline values, of each stated parameter
BASELINE <- c(50, 0.3, 0.2, 0.04, 0.60, 1.0)
FILEPATH<-"/media/kja505/FreeAgent/SA_RTest/OAT/Results"
oat_processParamSubsets(FILEPATH,PARAMETERS,500,MEASURES=c("Velocity","Displacement",RESULTFILENAME="trackedCells_Close.csv",OUTPUTCOLSTART=10, OUTPUTCOLEND=12, CSV_FILE_NAME="Robustness_For_DB.csv", BASELINE, PMIN, PMAX, PINC))
BASELINE
oat_processParamSubsets(FILEPATH,PARAMETERS,500,MEASURES=c("Velocity","Displacement",RESULTFILENAME="trackedCells_Close.csv",OUTPUTCOLSTART=10, OUTPUTCOLEND=12, CSV_FILE_NAME="Robustness_For_DB.csv", BASELINE=BASELINE, PMIN=PMIN, PMAX=PMAX, PINC=PINC))
oat_processParamSubsets(FILEPATH,PARAMETERS,500,MEASURES=c("Velocity","Displacement",RESULTFILENAME="trackedCells_Close.csv",ALTERNATIVEFILENAME=NULL,OUTPUTCOLSTART=10, OUTPUTCOLEND=12, CSV_FILE_NAME="Robustness_For_DB.csv", BASELINE=BASELINE, PMIN=PMIN, PMAX=PMAX, PINC=PINC))
oat_processParamSubsets(FILEPATH,PARAMETERS,500,MEASURES=c("Velocity","Displacement",trackedCells_Close.csv",NULL,10, 12,"Robustness_For_DB.csv", BASELINE=BASELINE, PMIN=PMIN, PMAX=PMAX, PINC=PINC))
oat_processParamSubsets(FILEPATH,PARAMETERS,500,MEASURES=c("Velocity","Displacement"),trackedCells_Close.csv",NULL,10, 12,"Robustness_For_DB.csv", BASELINE=BASELINE, PMIN=PMIN, PMAX=PMAX, PINC=PINC))
oat_processParamSubsets(FILEPATH,PARAMETERS,500,c("Velocity","Displacement"),"trackedCells_Close.csv",NULL,10, 12,"Robustness_For_DB.csv", BASELINE=BASELINE, PMIN=PMIN, PMAX=PMAX, PINC=PINC))
oat_processParamSubsets(FILEPATH,PARAMETERS,500,c("Velocity","Displacement"),"trackedCells_Close.csv",NULL,10, 12,"Robustness_For_DB.csv", BASELINE=BASELINE, PMIN=PMIN, PMAX=PMAX, PINC=PINC)
FILEPATH<-"/media/kja505/FreeAgent/Statistical_Analyses/OAT/12Hours_Cells"
PARAMETERS<-c("stableBindProbability","chemokineExpressionThreshold",
"initialChemokineExpressionValue","maxChemokineExpressionValue",
"maxProbabilityOfAdhesion","adhesionFactorExpressionSlope")
oat_processParamSubsets(FILEPATH,PARAMETERS,500,c("Velocity","Displacement"),"trackedCells_Close.csv",NULL,10, 12,"Robustness_For_DB.csv", BASELINE=BASELINE, PMIN=PMIN, PMAX=PMAX, PINC=PINC)
seq(PMIN[p],PMAX[p],by=PINC[p])
value<-0
# Read in the medians file
medians<-read.csv(file.path(FILEPATH,PARAMETERS[p],value,"Medians.csv")
}
}
# Read in the medians file
medians<-read.csv(file.path(FILEPATH,PARAMETERS[p],value,"Medians.csv"),header=T)
head(medians)
# Read in the medians file
medians<-read.csv(file.path(FILEPATH,PARAMETERS[p],10,"Medians.csv"),header=T)
PARAMETERS <- c("thresholdBindProbability", "chemoThreshold",
"chemoUpperLinearAdjust", "chemoLowerLinearAdjust",
"maxVCAMeffectProbabilityCutoff", "vcamSlope")
# The calibrated values, or baseline values, of each stated parameter
BASELINE <- c(50, 0.3, 0.2, 0.04, 0.60, 1.0)
PMIN <- c(0, 0.10, 0.10, 0.015, 0.1, 0.25)
PMIN <- c(10, 0.10, 0.10, 0.015, 0.1, 0.25)
PMAX <- c(100, 0.9, 0.50, 0.08, 1.0, 5.0)
PINC <- c(10, 0.1, 0.05, 0.005, 0.05, 0.25)
p<-1
value<-10
# Read in the medians file
medians<-read.csv(file.path(FILEPATH,PARAMETERS[p],value,"Medians.csv"),header=T)
FILEPATH<-"/media/kja505/FreeAgent/SA_RTest/OAT/Results"
PARAMETERS <- c("thresholdBindProbability", "chemoThreshold",
"chemoUpperLinearAdjust", "chemoLowerLinearAdjust",
"maxVCAMeffectProbabilityCutoff", "vcamSlope")
# The calibrated values, or baseline values, of each stated parameter
BASELINE <- c(50, 0.3, 0.2, 0.04, 0.60, 1.0)
PMIN <- c(10, 0.10, 0.10, 0.015, 0.1, 0.25)
PMAX <- c(100, 0.9, 0.50, 0.08, 1.0, 5.0)
PINC <- c(10, 0.1, 0.05, 0.005, 0.05, 0.25)
# Read in the medians file
medians<-read.csv(file.path(FILEPATH,PARAMETERS[p],value,"Medians.csv"),header=T)
head(medians)
PARAMETER_SET<-BASELINE
PARAMETER_SET
# Read in the medians file
PARAMETER_SET[p]<-value
PARAMETER_SET
result<-rbind(rep(PARAMETER_SET,nrow(medians)),medians)
head(result)
result<-rbind(rep(PARAMETER_SET,nrow(medians)),medians[,2:3])
head(result)
rep(PARAMETER_SET,nrow(medians))
result<-rbind(PARAMETER_SET,nrow(medians),medians[,2:3])
head(result)
PARAMETER_SET
rbind(rep(PARAMETER_SET,20))
cbind(rep(PARAMETER_SET,20))
PARAMETER_SET[rep(seq_len(nrow(medians)),each=1), ]
PARAMETER_SET[rep(seq_len(20),each=1), ]
PARAMETER_SET<-as.data.frame(PARAMETER_SET)
PARAMETER_SET
PARAMETER_SET<-BASELINE
PARAMETER_SET<-as.data.frame(PARAMETER_SET)
PARAMETER_SET[rep(seq_len(20),each=1), ]
rep(PARAMETER_SET,times=2)
rep(PARAMETER_SET,times=2-)
rep(PARAMETER_SET,times=20)
rep(PARAMETER_SET,each=1)
rep(PARAMETER_SET,each=10)
s<-rep(PARAMETER_SET,each=10)
nrow(s)
# Read in the medians file
PARAM_COL<-NULL
for(v in 1:500)
{
PARAM_COL<-rbind(PARAM_COL,PARAMETER_SET)
}
PARAM_COL
PARAM_COL<-NULL
for(v in 1:500)
{
PARAM_COL<-rbind(PARAM_COL,cbind(PARAMETER_SET))
}
PARAM_COL
PARAM_COL<-NULL
for(v in 1:500)
{
PARAM_COL<-rbind(PARAM_COL,rbind(PARAMETER_SET))
}
PARAM_COL
PARAMETER_SET
PARAMETER_SET<-BASELINE
PARAM_COL<-NULL
for(v in 1:500)
{
PARAM_COL<-rbind(PARAM_COL,rbind(PARAMETER_SET))
}
PARAM_COL
# Add to the global result set
result<-rbind(PARAM_COL,medians[,2:3])
nrow(PARAM_COL)
# Set the parameter value
PARAMETER_SET[p]<-value
# Make a column for binding to the result
PARAM_COL<-NULL
# Read in the medians file
medians<-read.csv(file.path(FILEPATH,PARAMETERS[p],value,"Medians.csv"),header=T)
for(v in 1:nrow(medians))
{
PARAM_COL<-rbind(PARAM_COL,rbind(PARAMETER_SET))
}
# Add to the global result set
result<-rbind(PARAM_COL,medians[,2:3])
nrow(medians)
nrow(PARAM_COL)
# Add to the global result set
result<-cbind(PARAM_COL,medians[,2:3])
head(result)
ALL_RESULTS<-NULL
PARAMETER_SET<-BASELINE
# Set the parameter value
PARAMETER_SET[p]<-value
# Make a column for binding to the result
PARAM_COL<-NULL
# Read in the medians file
medians<-read.csv(file.path(FILEPATH,PARAMETERS[p],value,"Medians.csv"),header=T)
for(v in 1:nrow(medians))
{
PARAM_COL<-rbind(PARAM_COL,rbind(PARAMETER_SET))
}
# Add to the global result set
result<-cbind(PARAM_COL,medians[,2:3])
ALL_RESULTS<-rbind(ALL_RESULTS,result)
value=20
# Set the parameter value
PARAMETER_SET[p]<-value
# Make a column for binding to the result
PARAM_COL<-NULL
# Read in the medians file
medians<-read.csv(file.path(FILEPATH,PARAMETERS[p],value,"Medians.csv"),header=T)
for(v in 1:nrow(medians))
{
PARAM_COL<-rbind(PARAM_COL,rbind(PARAMETER_SET))
}
# Add to the global result set
result<-cbind(PARAM_COL,medians[,2:3])
ALL_RESULTS<-rbind(ALL_RESULTS,result)
ALL_RESULTS
tail(ALL_RESULTS)
FILEPATH<-"/media/kja505/FreeAgent/SA_RTest/OAT/Results"
PARAMETERS <- c("thresholdBindProbability", "chemoThreshold",
"chemoUpperLinearAdjust", "chemoLowerLinearAdjust",
"maxVCAMeffectProbabilityCutoff", "vcamSlope")
# The calibrated values, or baseline values, of each stated parameter
BASELINE <- c(50, 0.3, 0.2, 0.04, 0.60, 1.0)
PMIN <- c(10, 0.10, 0.10, 0.015, 0.1, 0.25)
PMAX <- c(100, 0.9, 0.50, 0.08, 1.0, 5.0)
PINC <- c(10, 0.1, 0.05, 0.005, 0.05, 0.25)
ALL_RESULTS<-NULL
p<-1
PARAMETER_SET<-BASELINE
for(value in seq(PMIN[p],PMAX[p],by=PINC[p]))
{
# Set the parameter value
PARAMETER_SET[p]<-value
# Make a column for binding to the result
PARAM_COL<-NULL
# Read in the medians file
medians<-read.csv(file.path(FILEPATH,PARAMETERS[p],value,"Medians.csv"),header=T)
for(v in 1:nrow(medians))
{
PARAM_COL<-rbind(PARAM_COL,rbind(PARAMETER_SET))
}
# Add to the global result set
result<-cbind(PARAM_COL,medians[,2:3])
ALL_RESULTS<-rbind(ALL_RESULTS,result)
}
p<-2
PARAMETER_SET<-BASELINE
for(value in seq(PMIN[p],PMAX[p],by=PINC[p]))
{
# Set the parameter value
PARAMETER_SET[p]<-value
# Make a column for binding to the result
PARAM_COL<-NULL
# Read in the medians file
medians<-read.csv(file.path(FILEPATH,PARAMETERS[p],value,"Medians.csv"),header=T)
for(v in 1:nrow(medians))
{
PARAM_COL<-rbind(PARAM_COL,rbind(PARAMETER_SET))
}
# Add to the global result set
result<-cbind(PARAM_COL,medians[,2:3])
ALL_RESULTS<-rbind(ALL_RESULTS,result)
}
p<-3
PARAMETER_SET<-BASELINE
for(value in seq(PMIN[p],PMAX[p],by=PINC[p]))
{
# Set the parameter value
PARAMETER_SET[p]<-value
# Make a column for binding to the result
PARAM_COL<-NULL
# Read in the medians file
medians<-read.csv(file.path(FILEPATH,PARAMETERS[p],value,"Medians.csv"),header=T)
for(v in 1:nrow(medians))
{
PARAM_COL<-rbind(PARAM_COL,rbind(PARAMETER_SET))
}
# Add to the global result set
result<-cbind(PARAM_COL,medians[,2:3])
ALL_RESULTS<-rbind(ALL_RESULTS,result)
}
p<-4
PARAMETER_SET<-BASELINE
for(value in seq(PMIN[p],PMAX[p],by=PINC[p]))
{
# Set the parameter value
PARAMETER_SET[p]<-value
# Make a column for binding to the result
PARAM_COL<-NULL
# Read in the medians file
medians<-read.csv(file.path(FILEPATH,PARAMETERS[p],value,"Medians.csv"),header=T)
for(v in 1:nrow(medians))
{
PARAM_COL<-rbind(PARAM_COL,rbind(PARAMETER_SET))
}
# Add to the global result set
result<-cbind(PARAM_COL,medians[,2:3])
ALL_RESULTS<-rbind(ALL_RESULTS,result)
}
p<-5
PARAMETER_SET<-BASELINE
for(value in seq(PMIN[p],PMAX[p],by=PINC[p]))
{
# Set the parameter value
PARAMETER_SET[p]<-value
# Make a column for binding to the result
PARAM_COL<-NULL
# Read in the medians file
medians<-read.csv(file.path(FILEPATH,PARAMETERS[p],value,"Medians.csv"),header=T)
for(v in 1:nrow(medians))
{
PARAM_COL<-rbind(PARAM_COL,rbind(PARAMETER_SET))
}
# Add to the global result set
result<-cbind(PARAM_COL,medians[,2:3])
ALL_RESULTS<-rbind(ALL_RESULTS,result)
}
p<-6
PARAMETER_SET<-BASELINE
for(value in seq(PMIN[p],PMAX[p],by=PINC[p]))
{
# Set the parameter value
PARAMETER_SET[p]<-value
# Make a column for binding to the result
PARAM_COL<-NULL
# Read in the medians file
medians<-read.csv(file.path(FILEPATH,PARAMETERS[p],value,"Medians.csv"),header=T)
for(v in 1:nrow(medians))
{
PARAM_COL<-rbind(PARAM_COL,rbind(PARAMETER_SET))
}
# Add to the global result set
result<-cbind(PARAM_COL,medians[,2:3])
ALL_RESULTS<-rbind(ALL_RESULTS,result)
}
nrow(results)
tail(results)
ALL_RESULTS
tail(ALL_RESULTS)
colnames(ALL_RESULTS)<-c("stableBindProbability","chemokineExpressionThreshold","initialChemokineExpressionValue","maxChemokineExpressionValue","maxProbabilityOfAdhesion","adhesionFactorExpressionSlope","Velocity","Displacement")
write.csv("/home/kja505/Documents/spartanDB/test_data/Robustness_Data.csv",quote=F,row.names=F)
write.csv(ALL_RESULTS,"/home/kja505/Documents/spartanDB/test_data/Robustness_Data.csv",quote=F,row.names=F)
parameters
parameters<-c("a")
pmin<-c(0)
pmax<-c(1)
pinc<-c(0.1)
baseline<-c(0.5)
devtools::load_all(".")
oat_parameter_sampling(NULL,parameters, baseline, PMIN=pmin, PMAX=pmax, PINC=pinc, write_csv=FALSE,return_sample=TRUE)
pmax<-c(10)
pinc<-c(10)
baseline<-c(50)
oat_parameter_sampling(NULL,parameters, baseline, PMIN=pmin, PMAX=pmax, PINC=pinc, write_csv=FALSE,return_sample=TRUE)
pmax<-c(100)
oat_parameter_sampling(NULL,parameters, baseline, PMIN=pmin, PMAX=pmax, PINC=pinc, write_csv=FALSE,return_sample=TRUE)
a<-efast_generate_sample(NULL,3,65,parameters,PMIN,PMAX,write_csv=FALSE,return_sample=TRUE)
a<-efast_generate_sample(NULL,3,65,parameters,PMIN,PMAX,write_csv=FALSE,return_sample=TRUE)
parameters
PMIN
parameters<-c("a","b")
PMIN<-c(0,1)
PMAX<-c(2,4)
a<-efast_generate_sample(NULL,3,65,parameters,PMIN,PMAX,write_csv=FALSE,return_sample=TRUE)
a
length(a)
names(a)
a
PMAX<-c(2,4,6)
PMIN<-c(0,1,1)
parameters<-c("a","b","c")
a<-efast_generate_sample(NULL,3,65,parameters,PMIN,PMAX,write_csv=FALSE,return_sample=TRUE)
a
parameters<-c("a","b","c","d")
PMIN<-c(0,1,1,1)
PMAX<-c(2,4,6,8)
a<-efast_generate_sample(NULL,3,65,parameters,PMIN,PMAX,write_csv=FALSE,return_sample=TRUE)
a
a[,,parameter,curve]
a[,,2,1]
devtools::load_all(".")
FILEPATH<-"/home/kja505/Desktop/"
parameters<-c("stableBindProbability","chemokineExpressionThreshold","initialChemokineExpressionValue","maxChemokineExpressionValue","maxProbabilityOfAdhesion","adhesionFactorExpressionSlope")
measures<-c("Velocity","Displacement")
baseline<- c(50,0.3, 0.2, 0.04, 0.60, 1.0)
minvals <- c(0, 0.10, 0.10, 0.015, 0.1, 0.25)
maxvals <- c(100, 0.9, 0.50, 0.08, 1.0, 5.0)
incvals <- c(10, 0.1, 0.05, 0.005, 0.05, 0.25)
measure_scale<-c("microns","microns/min")
oat_csv_result_file_analysis(FILEPATH, "Robustness_Data.csv", parameters, baseline, measures, "ATest_Results.csv", minvals, maxvals, incvals, PARAMVALS=NULL)
parameters<-c("stableBindProbability","chemokineExpressionThreshold","initialChemokineExpressionValue","maxChemokineExpressionValue","maxProbabilityOfAdhesion","adhesionFactorExpressionSlope")
measures<-c("Velocity","Displacement")
baseline<- c(50,0.3, 0.2, 0.04, 0.60, 1.0)
minvals <- c(10, 0.10, 0.10, 0.015, 0.1, 0.25)
maxvals <- c(100, 0.9, 0.50, 0.08, 1.0, 5.0)
incvals <- c(10, 0.1, 0.05, 0.005, 0.05, 0.25)
oat_csv_result_file_analysis(FILEPATH, "Robustness_Data.csv", parameters, baseline, measures, "ATest_Results.csv", minvals, maxvals, incvals, PARAMVALS=NULL)
parameters<-c("stableBindProbability","chemokineExpressionThreshold","initialChemokineExpressionValue","maxChemokineExpressionValue","maxProbabilityOfAdhesion","adhesionFactorExpressionSlope")
measures<-c("Velocity","Displacement")
baseline<- c(50,0.3, 0.2, 0.04, 0.60, 1.0)
minvals <- c(10, 0.10, 0.10, 0.015, 0.1, 0.25)
maxvals <- c(100, 0.9, 0.50, 0.08, 0.95, 5.0)
incvals <- c(10, 0.1, 0.05, 0.005, 0.05, 0.25)
oat_csv_result_file_analysis(FILEPATH, "Robustness_Data.csv", parameters, baseline, measures, "ATest_Results.csv", minvals, maxvals, incvals, PARAMVALS=NULL)
FILEPATH<-"/home/kja505/Desktop/eFAST"
numcurves<-3
numsamples<-65
efast_get_overall_medians(FILEPATH, 3, parameters, 65, measures)
