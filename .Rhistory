rm(list=ls())
data("sim_data_for_emulation")
parameters<-c("stableBindProbability","chemokineExpressionThreshold",
"initialChemokineExpressionValue","maxChemokineExpressionValue",
"maxProbabilityOfAdhesion","adhesionFactorExpressionSlope")
measures<-c("Velocity","Displacement","PatchArea")
sampleMaxes <- cbind(100,0.9,0.5,0.08,1,5)
sampleMins <-cbind(0,0.1,0.1,0.015,0.1,0.25)
partitionedData <- partition_dataset(sim_data_for_emulation, parameters,
measures, percent_train=75, percent_test=15, percent_validation=10, normalise=TRUE,
p
!
rm(list=ls())
devtools::load_all(".")
data("sim_data_for_emulation")
parameters<-c("stableBindProbability","chemokineExpressionThreshold",
"initialChemokineExpressionValue","maxChemokineExpressionValue",
"maxProbabilityOfAdhesion","adhesionFactorExpressionSlope")
measures<-c("Velocity","Displacement","PatchArea")
sampleMaxes <- cbind(100,0.9,0.5,0.08,1,5)
sampleMins <-cbind(0,0.1,0.1,0.015,0.1,0.25)
sample_mins<-sampleMins
sample_maxes<-sampleMaxes
percent_train = 75
percent_test = 15
percent_validation = 10
normalise<-TRUE
heck_data_partitions(percent_train, percent_test, percent_validation)
check_data_partitions(percent_train, percent_test, percent_validation)
!is.null(nrow(dataset)) && nrow(dataset)>0
dataset<-sim_data_for_emulation
!is.null(nrow(dataset)) && nrow(dataset)>0
# Added 18th October 2018 in developing RoboSpartan - was noticed that user could
# submit dataset where whole columns were the same, which in normalisation causes
# issues. As such results have no use in the analysis, the decision was taken to
# remove these features
dataset_check<-dataset_precheck(dataset, parameters, measures)
dataset_check
# If we normalise, we need to have the mins and maxes for parameters and
# measures for denormalisation of results. If we don't normalise then
# there will be no denormalisation, but the values being passed will not
# be initialised, so we need to cope with both here
pre_normed_data_mins <- NULL
pre_normed_data_maxes <- NULL
is.null(sample_mins) | is.null(sample_maxes) | is.null(parameters)
parameters
normed_data <- normalise_dataset(dataset, sample_mins, sample_maxes,
parameters)
normed_data
sample_mins
sample_maxes
mins <- apply(dataset, 2, min)
mins
maxs <- apply(dataset, 2, max)
maxes
maxs
# we want to override the parameter bounds with those used in sampling
mins[parameters] <- sample_mins[parameters]
mins
sample_mins[parameters]
sample_mins
colnames(sample_mins)
length(sample_mins)
length(sample_mins)==length(parameters)
length(sample_mins)==length(parameters) & length(sample_maxes)==length(parameters)
colnames(sample_mins)<-parameters
colnames(sample_maxes)<-parameters
devtools::load_all(".")
range_check<-check_ranges(sample_mins,sample_maxes,parameters)
sample_mins<-range_check$sample_mins
sample_maxes<-range_check$sample_maxes
sample_mins
devtools::load_all(".")
data("sim_data_for_emulation")
rm(list=ls())
data("sim_data_for_emulation")
parameters<-c("stableBindProbability","chemokineExpressionThreshold",
"initialChemokineExpressionValue","maxChemokineExpressionValue",
"maxProbabilityOfAdhesion","adhesionFactorExpressionSlope")
measures<-c("Velocity","Displacement","PatchArea")
sampleMaxes <- cbind(100,0.9,0.5,0.08,1,5)
sampleMins <-cbind(0,0.1,0.1,0.015,0.1,0.25)
partitionedData <- partition_dataset(sim_data_for_emulation, parameters,
measures, percent_train=75, percent_test=15, percent_validation=10, normalise=TRUE,
sample_mins = sampleMins, sample_maxes = sampleMaxes)
partitionedData$training
rm(list=ls())
data("sim_data_for_emulation")
parameters<-c("stableBindProbability","chemokineExpressionThreshold",
"initialChemokineExpressionValue","maxChemokineExpressionValue",
"maxProbabilityOfAdhesion","adhesionFactorExpressionSlope")
measures<-c("Velocity","Displacement","PatchArea")
sampleMaxes <- cbind(100,0.9,0.5,0.08,1,5)
sampleMins <-cbind(0,0.1,0.1,0.015,0.1,0.25)
dataset<-sim_data_for_emulation
parameters
measures
percent_train = 75
percent_test = 15
percent_validation = 10
normalise<-TRUE
sample_mins<-sampleMins
sample_maxes<-sampleMaxes
check_data_partitions(percent_train, percent_test, percent_validation)
# Added 18th October 2018 in developing RoboSpartan - was noticed that user could
# submit dataset where whole columns were the same, which in normalisation causes
# issues. As such results have no use in the analysis, the decision was taken to
# remove these features
dataset_check<-dataset_precheck(dataset, parameters, measures)
range_check<-check_ranges(sample_mins,sample_maxes,parameters)
sample_mins<-range_check$sample_mins
sample_maxes<-range_check$sample_maxes
sample_mins
# If we normalise, we need to have the mins and maxes for parameters and
# measures for denormalisation of results. If we don't normalise then
# there will be no denormalisation, but the values being passed will not
# be initialised, so we need to cope with both here
pre_normed_data_mins <- NULL
pre_normed_data_maxes <- NULL
mins <- apply(dataset, 2, min)
maxs <- apply(dataset, 2, max)
mins
maxes
maxs
sample_mins[parameters]
sample_mins
a<-data.frame(sample_mins)
a[parameters]
devtools::load_all(".")
rm(list=ls())
devtools::load_all(".")
data("sim_data_for_emulation")
parameters<-c("stableBindProbability","chemokineExpressionThreshold",
"initialChemokineExpressionValue","maxChemokineExpressionValue",
"maxProbabilityOfAdhesion","adhesionFactorExpressionSlope")
measures<-c("Velocity","Displacement","PatchArea")
sampleMaxes <- cbind(100,0.9,0.5,0.08,1,5)
sampleMins <-cbind(0,0.1,0.1,0.015,0.1,0.25)
partitionedData <- partition_dataset(sim_data_for_emulation, parameters,
measures, percent_train=75, percent_test=15, percent_validation=10, normalise=TRUE,
sample_mins = sampleMins, sample_maxes = sampleMaxes)
rm(list=ls())
data("sim_data_for_emulation")
parameters<-c("stableBindProbability","chemokineExpressionThreshold",
"initialChemokineExpressionValue","maxChemokineExpressionValue",
"maxProbabilityOfAdhesion","adhesionFactorExpressionSlope")
measures<-c("Velocity","Displacement","PatchArea")
sampleMaxes <- cbind(100,0.9,0.5,0.08,1,5)
sampleMins <-cbind(0,0.1,0.1,0.015,0.1,0.25)
dataset<-sim_data_for_emulation
sample_mins<-sampleMins
sample_maxes<-sampleMaxes
range_check<-check_ranges(sample_mins,sample_maxes,parameters)
sample_mins<-range_check$sample_mins
sample_maxes<-range_check$sample_maxes
# If we normalise, we need to have the mins and maxes for parameters and
# measures for denormalisation of results. If we don't normalise then
# there will be no denormalisation, but the values being passed will not
# be initialised, so we need to cope with both here
pre_normed_data_mins <- NULL
pre_normed_data_maxes <- NULL
mins <- apply(dataset, 2, min)
maxs <- apply(dataset, 2, max)
mins
maxes
maxs
sample_mins[parameters]
mins[parameters]
typeof(dataset)
typeof(mins)
check_ranges<-function(sample_mins,sample_maxes,parameters)
{
if(length(sample_mins)==length(parameters) & length(sample_maxes)==length(parameters))
{
colnames(sample_mins)<-parameters
colnames(sample_maxes)<-parameters
return(list("sample_mins"=sample_mins,"sample_maxes"=sample_maxes))
}
}
sampleMaxes <- cbind(100,0.9,0.5,0.08,1,5)
sampleMins <-cbind(0,0.1,0.1,0.015,0.1,0.25)
data("sim_data_for_emulation")
parameters<-c("stableBindProbability","chemokineExpressionThreshold",
"initialChemokineExpressionValue","maxChemokineExpressionValue",
"maxProbabilityOfAdhesion","adhesionFactorExpressionSlope")
measures<-c("Velocity","Displacement","PatchArea")
sample_maxes <- cbind(100,0.9,0.5,0.08,1,5)
sample_mins <-cbind(0,0.1,0.1,0.015,0.1,0.25)
dataset<-sim_data_for_emulation
range_check<-check_ranges(sample_mins,sample_maxes,parameters)
sample_mins<-range_check$sample_mins
sample_maxes<-range_check$sample_maxes
sample_mins
typeof(sample_mins)
mins <- apply(dataset, 2, min)
maxs <- apply(dataset, 2, max)
mins
mins[parameters]
sample_mins[parameters]
typeof(mins)
typeof(sample_mins)
dim(mins)
dim(sample_mins)
mins <- data.frame(apply(dataset, 2, min))
mins <- data.frame(apply(dataset, 2, min))
maxs <- data.frame(apply(dataset, 2, max))
mins
mins <- apply(dataset, 2, min)
maxs <- apply(dataset, 2, max)
sample_maxes <- c(100,0.9,0.5,0.08,1,5)
sample_mins <-c(0,0.1,0.1,0.015,0.1,0.25)
sample_mins
sample_mins <-cbind(0,0.1,0.1,0.015,0.1,0.25)
sample_maxes <- cbind(100,0.9,0.5,0.08,1,5)
sample_mins
colnmes(sample_mins)<-parameters
colnames(sample_mins)<-parameters
sample_mins
sample_mins[parameters]
as.list(sample_mins)
as.numeric(sample_mins)
sample_mins
mins
typeof(mins)
as.double(sample_mins)
dims(dataset)
dim(dataset)
typeof(dataset)
apply(sample_mins,2,as.numeric)
sample_mins
devtools::load_all(".")
rm(list=ls())
data("sim_data_for_emulation")
parameters<-c("stableBindProbability","chemokineExpressionThreshold",
"initialChemokineExpressionValue","maxChemokineExpressionValue",
"maxProbabilityOfAdhesion","adhesionFactorExpressionSlope")
measures<-c("Velocity","Displacement","PatchArea")
sample_maxes <- c(100,0.9,0.5,0.08,1,5)
sample_mins <-c(0,0.1,0.1,0.015,0.1,0.25)
partitionedData <- partition_dataset(sim_data_for_emulation, parameters,
measures, percent_train=75, percent_test=15, percent_validation=10, normalise=TRUE,
sample_mins = sample_mins, sample_maxes = sample_maxes)
rm(list=ls())
devtools::load_all(".")
data("sim_data_for_emulation")
parameters<-c("stableBindProbability","chemokineExpressionThreshold",
"initialChemokineExpressionValue","maxChemokineExpressionValue",
"maxProbabilityOfAdhesion","adhesionFactorExpressionSlope")
measures<-c("Velocity","Displacement","PatchArea")
sample_maxes <- c(100,0.9,0.5,0.08,1,5)
sample_mins <-c(0,0.1,0.1,0.015,0.1,0.25)
dataset<-sim_data_for_emulation
range_check<-check_ranges(sample_mins,sample_maxes,parameters)
sample_mins<-range_check$sample_mins
sampl
rm(list=ls())
data("sim_data_for_emulation")
parameters<-c("stableBindProbability","chemokineExpressionThreshold",
"initialChemokineExpressionValue","maxChemokineExpressionValue",
"maxProbabilityOfAdhesion","adhesionFactorExpressionSlope")
measures<-c("Velocity","Displacement","PatchArea")
sample_maxes <- cbind(100,0.9,0.5,0.08,1,5)
sample_mins <-cbind(0,0.1,0.1,0.015,0.1,0.25)
dataset<-sim_data_for_emulation
percent_train = 75
percent_test = 15
percent_validation = 10
range_check<-check_ranges(sample_mins,sample_maxes,parameters)
sample_mins<-range_check$sample_mins
sample_maxes<-range_check$sample_maxes
# If we normalise, we need to have the mins and maxes for parameters and
# measures for denormalisation of results. If we don't normalise then
# there will be no denormalisation, but the values being passed will not
# be initialised, so we need to cope with both here
pre_normed_data_mins <- NULL
pre_normed_data_maxes <- NULL
mins <- apply(dataset, 2, min)
maxs <- apply(dataset, 2, max)
mins
maxs
# we want to override the parameter bounds with those used in sampling
mins[parameters] <- sample_mins[parameters]
mins
maxs[parameters] <- sample_maxes[parameters]
maxs
devtools::load_all(".")
data("sim_data_for_emulation")
parameters<-c("stableBindProbability","chemokineExpressionThreshold",
"initialChemokineExpressionValue","maxChemokineExpressionValue",
"maxProbabilityOfAdhesion","adhesionFactorExpressionSlope")
measures<-c("Velocity","Displacement","PatchArea")
sample_maxes <- cbind(100,0.9,0.5,0.08,1,5)
sample_mins <-cbind(0,0.1,0.1,0.015,0.1,0.25)
partitionedData <- partition_dataset(sim_data_for_emulation, parameters,
measures, percent_train=75, percent_test=15, percent_validation=10, normalise=TRUE,
sample_mins = sample_mins, sample_maxes = sample_maxes)
partitionedData$testing
devtools::check()
rm(list=ls())
sampleMaxes <- cbind(0.9,0.5,0.08,1,5)
sampleMins <-cbind(0.1,0.1,0.015,0.1,0.25)
modelList <- c("RF","GLM")
measures<-c("Velocity","Displacement")
parameters<-c("stableBindProbability","chemokineExpressionThreshold",
"initialChemokineExpressionValue","maxChemokineExpressionValue",
"maxProbabilityOfAdhesion","adhesionFactorExpressionSlope")
data("sim_data_for_emulation")
partitionedData <- partition_dataset(sim_data_for_emulation, parameters,
measures, percent_train=75, percent_test=15, percent_validation=10, normalise=TRUE,
sample_mins = sampleMins, sample_maxes = sampleMaxes)
parameters
devtools::load_all(".")
devtools::check()
devtools::check()
devtools::load_all(".")
devtools::check()
devtools::check()
devtools::check()
devtools::test()
devtools::check()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
# Setup:
load(file.path("Robustness_result_for_test.Rda"))
getwd()
load("/home/kja505/Dropbox/spartan_3.0/spartan/tests/testthat/Robustness_result_for_test.Rda")
# write out as CSV file so that we can feed this to function
write.csv(robustness_result_for_test,file="robustness_result.csv")
oat_plotResultDistribution(getwd(), c("chemoLowerLinearAdjust", "chemoUpperLinearAdjust"),
c("Velocity", "Displacement"), c("microns/min","microns"), "robustness_result.csv", c(0.04, 0.2), PMIN = c(0.015, 0.10), PMAX = c(0.08, 0.50), PINC = c(0.005, 0.05),
PARAMVALS = NULL)
devtools::test()
load(/home/kja505/Dropbox/spartan_3.0/spartan/tests/testthat/Robustness_hour12_data.Rda)
load("/home/kja505/Dropbox/spartan_3.0/spartan/tests/testthat/Robustness_hour12_data.Rda")
write.csv(robustness_hour12_data,file="robustness_result_12.csv")
load("/home/kja505/Dropbox/spartan_3.0/spartan/tests/testthat/Robustness_hour36_data.Rda")
write.csv(robustness_hour36_data,file="robustness_result_36.csv")
oat_plotResultDistribution(getwd(), c("chemoLowerLinearAdjust", "chemoUpperLinearAdjust"),
c("Velocity", "Displacement"), c("microns/min","microns"), "robustness_result.csv", c(0.04, 0.2), PMIN = c(0.015, 0.10), PMAX = c(0.08, 0.50), PINC = c(0.005, 0.05),
PARAMVALS = NULL, TIMEPOINTS<-c(12,36), TIMEPOINTSCALE="Hours")
devtools::load_all(".")
oat_plotResultDistribution(getwd(), c("chemoLowerLinearAdjust", "chemoUpperLinearAdjust"),
c("Velocity", "Displacement"), c("microns/min","microns"), "robustness_result.csv", c(0.04, 0.2), PMIN = c(0.015, 0.10), PMAX = c(0.08, 0.50), PINC = c(0.005, 0.05),
PARAMVALS = NULL, TIMEPOINTS<-c(12,36), TIMEPOINTSCALE="Hours")
devtools::load_all(".")
oat_plotResultDistribution(getwd(), c("chemoLowerLinearAdjust", "chemoUpperLinearAdjust"),
c("Velocity", "Displacement"), c("microns/min","microns"), "robustness_result.csv", c(0.04, 0.2), PMIN = c(0.015, 0.10), PMAX = c(0.08, 0.50), PINC = c(0.005, 0.05),
PARAMVALS = NULL)
oat_plotResultDistribution(getwd(), c("chemoLowerLinearAdjust", "chemoUpperLinearAdjust"),
c("Velocity", "Displacement"), c("microns/min","microns"), "robustness_result.csv", c(0.04, 0.2), PMIN = c(0.015, 0.10), PMAX = c(0.08, 0.50), PINC = c(0.005, 0.05),
PARAMVALS = NULL, TIMEPOINTS<-c(12,36), TIMEPOINTSCALE="Hours")
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
arguments <- load_lhc_training_data()
partitionedData <- partition_dataset(arguments$dataset,arguments$parameters, measures=arguments$measures, percent_train = 75, percent_test = 15,
percent_validation = 10, seed = NULL,
normalise = FALSE, sample_mins = arguments$sample_mins, sample_maxes = arguments$sample_maxes,
timepoint = NULL)
partitionedData$training
partitionedData$testing
nrow(partitionedData$training)
nrow(partitionedData$testing)
nrow(partitionedData$validation)
partition_dataset(arguments$dataset,arguments$parameters,percent_train = "STRING", percent_test = 15,
percent_validation = 10, seed = NULL,
normalise = FALSE, sample_mins = arguments$sample_mins, sample_maxes = arguments$sample_maxes,
timepoint = NULL)
partition_dataset(arguments$dataset,arguments$parameters,percent_train = 10, percent_test = 15,
percent_validation = 10, seed = NULL,
normalise = FALSE, sample_mins = arguments$sample_mins, sample_maxes = arguments$sample_maxes,
timepoint = NULL)
devtools::test()
partition_dataset(arguments$dataset,arguments$parameters,percent_train = "STRING", percent_test = 15,
percent_validation = 10, seed = NULL,
normalise = FALSE, sample_mins = arguments$sample_mins, sample_maxes = arguments$sample_maxes,
timepoint = NULL)
devtools::test()
# Load in the required data and parameter arguments
arguments <- load_lhc_training_data()
ranges_checked<-check_ranges(arguments$sample_mins, arguments$sample_maxes,parameters)
# Normalise dataset
normalised_set <- normalise_dataset(arguments$dataset, ranges_checked$sample_mins, ranges_checked$sample_maxes, arguments$parameters)
normalised_set
# Denormalise the set and it should be the same as the original
transformedData <- denormalise_dataset(normalised_set$scaled[arguments$parameters], ranges_checked$sample_mins, ranges_checked$sample_maxes)
normalised_data<-normalised_set$scaled[arguments$parameters]
scaled_mins<-ranges_checked$sample_mins
scaled_maxes<-ranges_checked$sample_maxes
c<-1
ncol(normalised_data)
normalised_data[,c]
scaled_maxes[, c]
scaled_maxes[c]
devtools::test()
arguments <- load_lhc_training_data()
ranges_checked<-check_ranges(arguments$sample_mins, arguments$sample_maxes,parameters)
normalised_set <- normalise_dataset(arguments$dataset, ranges_checked$sample_mins, ranges_checked$sample_maxes, arguments$parameters)
min(normalised_set$scaled)
max(normalised_set$scaled)
# Build a dataset of two columns between -50 and 50
x<- -50:50
testDat <- cbind(sample(x,100),sample(x,100))
colnames(testDat) <- c("A","B")
ranges_checked<-check_ranges(cbind(-50,-50), c(50,50),c("A","B"))
ranges_checked<-check_ranges(cbind(-50,-50), cbind(50,50),c("A","B"))
normalised_set <- normalise_dataset(testDat, ranges_checked$sample_mins, ranges_checked$sample_maxes, c("A","B"))
min(normalised_set$scaled)
max(normalised_set$scaled)
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
load("/home/kja505/Dropbox/spartan_3.0/spartan/tests/testthat/efast_curve1_summary.Rda")
load("/home/kja505/Dropbox/spartan_3.0/spartan/tests/testthat/efast_curve1_summary60.Rda")
load("/home/kja505/Dropbox/spartan_3.0/spartan/tests/testthat/efast_curve2_summary.Rda")
load("/home/kja505/Dropbox/spartan_3.0/spartan/tests/testthat/efast_curve2_summary60.Rda")
# write these to file
write_data_to_csv(efast_curve1_summary,"Curve1_Results_Summary_12.csv")
write_data_to_csv(efast_curve2_summary,"Curve2_Results_Summary_12.csv")
write_data_to_csv(efast_curve1_summary_60,"Curve1_Results_Summary_60.csv")
write_data_to_csv(efast_curve2_summary_60,"Curve2_Results_Summary_60.csv")
efast_run_Analysis(getwd(),c("Velocity","Displacement"),
c("BindProbability","ChemoThreshold","ChemoUpperLinearAdjust","ChemoLowerLinearAdjust","VCAMProbabilityThreshold","VCAMSlope","Dummy"),
2,65,1:2,0.95,GRAPH_FLAG=TRUE, "efast_summary.csv",TIMEPOINTS=c(12,60))
# Read in the result
result <- read.csv("efast_summary_12.csv",header=T,check.names=F)
devtools::load_all(".")
efast_run_Analysis(getwd(),c("Velocity","Displacement"),
c("BindProbability","ChemoThreshold","ChemoUpperLinearAdjust","ChemoLowerLinearAdjust","VCAMProbabilityThreshold","VCAMSlope","Dummy"),
2,65,1:2,0.95,GRAPH_FLAG=TRUE, "efast_summary.csv",TIMEPOINTS=c(12,60))
devtools::load_all(".")
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
## This is the first test that utilises the ensemble, downloadable from online
## Download it here, and delete it on the final test that uses this object.
# Saves downloading several times
download.file("www.kieranalden.info/spartan/test_data/built_ensemble_72.Rda", "built_ensemble")
# Load this in
load("built_ensemble")
#load("built_ensemble_72.Rda")
dir.create(file.path(getwd(),"SA"))
efast_generate_sample(file.path(getwd(),"SA"), 3,65, c("stableBindProbability","chemokineExpressionThreshold",
"initialChemokineExpressionValue",
"maxChemokineExpressionValue","maxProbabilityOfAdhesion",
"adhesionFactorExpressionSlope", "dummy"), cbind(0,0.1,0.1,0.015,0.1,0.25,0), cbind(100,0.9,0.5,0.08,1,5,1))
emulate_efast_sampled_parameters(file.path(getwd(),"SA"), built_ensemble,
c("stableBindProbability","chemokineExpressionThreshold",
"initialChemokineExpressionValue",
"maxChemokineExpressionValue","maxProbabilityOfAdhesion",
"adhesionFactorExpressionSlope"), c("Velocity","Displacement"),
3, ensemble_set = TRUE, normalise = TRUE)
parameters
parameters<- c("stableBindProbability","chemokineExpressionThreshold",
"initialChemokineExpressionValue",
"maxChemokineExpressionValue","maxProbabilityOfAdhesion",
"adhesionFactorExpressionSlope")
"dummy" %in% parameters
"Dummy" %in% parameters
devtools::load_all(".")
emulate_efast_sampled_parameters(file.path(getwd(),"SA"), built_ensemble,
c("stableBindProbability","chemokineExpressionThreshold",
"initialChemokineExpressionValue",
"maxChemokineExpressionValue","maxProbabilityOfAdhesion",
"adhesionFactorExpressionSlope","dummy"), c("Velocity","Displacement"),
3, ensemble_set = TRUE, normalise = TRUE)
data("emulated_lhc_values")
# Downloaded previously from website, should exist in workspace
load("built_ensemble")
dir.create(file.path(getwd(),"SA"))
emulate_lhc_sampled_parameters(file.path(getwd(),"SA"), built_ensemble,
c("stableBindProbability","chemokineExpressionThreshold",
"initialChemokineExpressionValue",
"maxChemokineExpressionValue","maxProbabilityOfAdhesion",
"adhesionFactorExpressionSlope"), c("Velocity","Displacement"),
c("microns","microns/min"), dataset = emulated_lhc_values, normalise = TRUE)
devtools::load_all(".")
emulate_lhc_sampled_parameters(file.path(getwd(),"SA"), built_ensemble,
c("stableBindProbability","chemokineExpressionThreshold",
"initialChemokineExpressionValue",
"maxChemokineExpressionValue","maxProbabilityOfAdhesion",
"adhesionFactorExpressionSlope"), c("Velocity","Displacement"),
c("microns","microns/min"), dataset = emulated_lhc_values, normalise = TRUE)
devtools::load_all(".")
emulate_lhc_sampled_parameters(file.path(getwd(),"SA"), built_ensemble,
c("stableBindProbability","chemokineExpressionThreshold",
"initialChemokineExpressionValue",
"maxChemokineExpressionValue","maxProbabilityOfAdhesion",
"adhesionFactorExpressionSlope"), c("Velocity","Displacement"),
c("microns","microns/min"), dataset = emulated_lhc_values, normalise = TRUE)
devtools::test()
devtools::test()
devtools::test()
devtools::check()
devtools::check()
