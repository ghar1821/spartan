NETLOGO_SETUP_FUNCTION, NETLOGO_RUN_FUNCTION, MEASURES)
# Add the parameter information
xml<-add_parameter_value_to_file(xml, PARAMETERS, ParameterInfo,
design, SAMPLE, PARAMVALS)
# Close and write the file
Output_File <- make_extension(
make_path(c(FILEPATH,SAMPLE,
join_strings_nospace(c("lhc_analysis_set",SAMPLE)))),
"xml")
close_and_write_netlogo_file(xml, Output_File)
}
con <- xmlOutputDOM()
con$addTag("author", "Duncan Temple Lang")
con$addTag("address",  close=FALSE)
con$addTag("office", "2C-259")
con$addTag("street", "Mountain Avenue.")
con$addTag("phone", close = FALSE)
con$addTag("area", "908", attrs=c(state="NJ"))
con$addTag("number", "582-3217")
con$closeTag() # phone
con$closeTag() # address
saveXML(con, file="/home/kja505/Desktop/Test.xml", TRUE, prefix =
'<?xml version="1.0" encoding="us-ascii"?>\n', doctype =
'<!DOCTYPE experiments SYSTEM "behaviorspace.dtd">')
saveXML(con, file="/home/kieran/Desktop/Test.xml", TRUE, prefix =
'<?xml version="1.0" encoding="us-ascii"?>\n', doctype =
'<!DOCTYPE experiments SYSTEM "behaviorspace.dtd">')
PARAM<-1
con <- xmlOutputDOM()
con$addTag("author", "Duncan Temple Lang")
con$addTag("address",  close=FALSE)
con$addTag("office", "2C-259")
con$addTag("street", "Mountain Avenue.")
con$addTag("phone", attrs = c(
variable = PARAMETERS[PARAM]),close = FALSE)
con$addTag("area", "908", attrs=c(state="NJ"))
con$addTag("number", "582-3217")
con$closeTag() # phone
con$closeTag() # address
saveXML(con, file="/home/kja505/Desktop/Test.xml", TRUE, prefix =
'<?xml version="1.0" encoding="us-ascii"?>\n', doctype =
'<!DOCTYPE experiments SYSTEM "behaviorspace.dtd">')
con <- xmlOutputDOM()
con$addTag("author", "Duncan Temple Lang")
con$addTag("address",  close=FALSE)
con$addTag("office", "2C-259")
con$addTag("street", "Mountain Avenue.")
con$addTag("phone", attrs = c(
variable = PARAMETERS[PARAM]),close = FALSE)
con$addTag("area", "908", attrs=c(state="NJ"))
con$addTag("number", "582-3217")
con$closeTag() # phone
con$closeTag() # address
saveXML(con, file="/home/kieran/Desktop/Test.xml", TRUE, prefix =
'<?xml version="1.0" encoding="us-ascii"?>\n', doctype =
'<!DOCTYPE experiments SYSTEM "behaviorspace.dtd">')
con <- xmlOutputDOM()
con$addTag("author", "Duncan Temple Lang")
con$addTag("address",  close=FALSE)
con$addTag("office", "2C-259")
con$addTag("street", "Mountain Avenue.")
con$addTag("phone", attrs = c(
variable = PARAMETERS[PARAM]),close = FALSE)
con$addTag("area", "908", attrs=c(state="NJ"))
con$addTag("number", "582-3217")
con$closeTag() # phone
con$closeTag() # address
con$addTag("section", close = FALSE)
con$addNode(xmlTextNode("This is some text "))
con$addTag("a","and a link", attrs=c(href="http://www.omegahat.net"))
con$addNode(xmlTextNode("and some follow up text"))
saveXML(con, file="/home/kieran/Desktop/Test.xml", TRUE, prefix =
'<?xml version="1.0" encoding="us-ascii"?>\n', doctype =
'<!DOCTYPE experiments SYSTEM "behaviorspace.dtd">')
con <- xmlOutputDOM()
con$addTag("author", "Duncan Temple Lang")
con$addTag("address",  close=FALSE)
con$addTag("office", "2C-259")
con$addTag("street", "Mountain Avenue.")
con$addTag("phone", attrs = c(
variable = PARAMETERS[PARAM]),close = FALSE)
con$addTag("area", "908", attrs=c(state="NJ"))
con$addTag("number", "582-3217")
con$closeTag() # phone
con$closeTag() # address
con$addTag("section", close = FALSE)
con$addNode(xmlTextNode("This is some text "))
con$addTag("a","and a link", attrs=c(href="http://www.omegahat.net"))
con$addNode(xmlTextNode("and some follow up text"))
con$addTag("subsection", close = FALSE)
con$addNode(xmlTextNode("some addtional text "))
con$addTag("a", attrs=c(href="http://www.omegahat.net"), close=FALSE)
con$addNode(xmlTextNode("the content of the link"))
con$closeTag() # a
con$closeTag() # "subsection"
con$closeTag() # section
saveXML(con, file="/home/kieran/Desktop/Test.xml", TRUE, prefix =
'<?xml version="1.0" encoding="us-ascii"?>\n', doctype =
'<!DOCTYPE experiments SYSTEM "behaviorspace.dtd">')
devtools::load_all()
for (SAMPLE in 1:NUMSAMPLES) {
# Create a folder for this sample
dir.create(file.path(FILEPATH, SAMPLE), showWarnings = FALSE)
# Initialise the XML file
xml <- initialise_netlogo_xml_file(
"LHC_Sample", SAMPLE, EXPERIMENT_REPETITIONS, RUN_METRICS_EVERYSTEP,
NETLOGO_SETUP_FUNCTION, NETLOGO_RUN_FUNCTION, MEASURES)
# Add the parameter information
xml<-add_parameter_value_to_file(xml, PARAMETERS, ParameterInfo,
design, SAMPLE, PARAMVALS)
# Close and write the file
Output_File <- make_extension(
make_path(c(FILEPATH,SAMPLE,
join_strings_nospace(c("lhc_analysis_set",SAMPLE)))),
"xml")
close_and_write_netlogo_file(xml, Output_File)
}
devtools::load_all()
for (SAMPLE in 1:NUMSAMPLES) {
# Create a folder for this sample
dir.create(file.path(FILEPATH, SAMPLE), showWarnings = FALSE)
# Initialise the XML file
xml <- initialise_netlogo_xml_file(
"LHC_Sample", SAMPLE, EXPERIMENT_REPETITIONS, RUN_METRICS_EVERYSTEP,
NETLOGO_SETUP_FUNCTION, NETLOGO_RUN_FUNCTION, MEASURES)
# Add the parameter information
xml<-add_parameter_value_to_file(xml, PARAMETERS, ParameterInfo,
design, SAMPLE, PARAMVALS)
# Close and write the file
Output_File <- make_extension(
make_path(c(FILEPATH,SAMPLE,
join_strings_nospace(c("lhc_analysis_set",SAMPLE)))),
"xml")
close_and_write_netlogo_file(xml, Output_File)
}
devtools::load()
devtools::load_all()
for (SAMPLE in 1:NUMSAMPLES) {
# Create a folder for this sample
dir.create(file.path(FILEPATH, SAMPLE), showWarnings = FALSE)
# Initialise the XML file
xml <- initialise_netlogo_xml_file(
"LHC_Sample", SAMPLE, EXPERIMENT_REPETITIONS, RUN_METRICS_EVERYSTEP,
NETLOGO_SETUP_FUNCTION, NETLOGO_RUN_FUNCTION, MEASURES)
# Add the parameter information
xml<-add_parameter_value_to_file(xml, PARAMETERS, ParameterInfo,
design, SAMPLE, PARAMVALS)
# Close and write the file
Output_File <- make_extension(
make_path(c(FILEPATH,SAMPLE,
join_strings_nospace(c("lhc_analysis_set",SAMPLE)))),
"xml")
close_and_write_netlogo_file(xml, Output_File)
}
devtools::load_all()
for (SAMPLE in 1:NUMSAMPLES) {
# Create a folder for this sample
dir.create(file.path(FILEPATH, SAMPLE), showWarnings = FALSE)
# Initialise the XML file
xml <- initialise_netlogo_xml_file(
"LHC_Sample", SAMPLE, EXPERIMENT_REPETITIONS, RUN_METRICS_EVERYSTEP,
NETLOGO_SETUP_FUNCTION, NETLOGO_RUN_FUNCTION, MEASURES)
# Add the parameter information
xml<-add_parameter_value_to_file(xml, PARAMETERS, ParameterInfo,
design, SAMPLE, PARAMVALS)
# Close and write the file
Output_File <- make_extension(
make_path(c(FILEPATH,SAMPLE,
join_strings_nospace(c("lhc_analysis_set",SAMPLE)))),
"xml")
close_and_write_netlogo_file(xml, Output_File)
}
devtools::load_all()
for (SAMPLE in 1:NUMSAMPLES) {
# Create a folder for this sample
dir.create(file.path(FILEPATH, SAMPLE), showWarnings = FALSE)
# Initialise the XML file
xml <- initialise_netlogo_xml_file(
"LHC_Sample", SAMPLE, EXPERIMENT_REPETITIONS, RUN_METRICS_EVERYSTEP,
NETLOGO_SETUP_FUNCTION, NETLOGO_RUN_FUNCTION, MEASURES)
# Add the parameter information
xml<-add_parameter_value_to_file(xml, PARAMETERS, ParameterInfo,
design, SAMPLE, PARAMVALS)
# Close and write the file
Output_File <- make_extension(
make_path(c(FILEPATH,SAMPLE,
join_strings_nospace(c("lhc_analysis_set",SAMPLE)))),
"xml")
close_and_write_netlogo_file(xml, Output_File)
}
devtools::load_all()
for (SAMPLE in 1:NUMSAMPLES) {
# Create a folder for this sample
dir.create(file.path(FILEPATH, SAMPLE), showWarnings = FALSE)
# Initialise the XML file
xml <- initialise_netlogo_xml_file(
"LHC_Sample", SAMPLE, EXPERIMENT_REPETITIONS, RUN_METRICS_EVERYSTEP,
NETLOGO_SETUP_FUNCTION, NETLOGO_RUN_FUNCTION, MEASURES)
# Add the parameter information
xml<-add_parameter_value_to_file(xml, PARAMETERS, ParameterInfo,
design, SAMPLE, PARAMVALS)
# Close and write the file
Output_File <- make_extension(
make_path(c(FILEPATH,SAMPLE,
join_strings_nospace(c("lhc_analysis_set",SAMPLE)))),
"xml")
close_and_write_netlogo_file(xml, Output_File)
}
devtools::load_all()
for (SAMPLE in 1:NUMSAMPLES) {
# Create a folder for this sample
dir.create(file.path(FILEPATH, SAMPLE), showWarnings = FALSE)
# Initialise the XML file
xml <- initialise_netlogo_xml_file(
"LHC_Sample", SAMPLE, EXPERIMENT_REPETITIONS, RUN_METRICS_EVERYSTEP,
NETLOGO_SETUP_FUNCTION, NETLOGO_RUN_FUNCTION, MEASURES)
# Add the parameter information
xml<-add_parameter_value_to_file(xml, PARAMETERS, ParameterInfo,
design, SAMPLE, PARAMVALS)
# Close and write the file
Output_File <- make_extension(
make_path(c(FILEPATH,SAMPLE,
join_strings_nospace(c("lhc_analysis_set",SAMPLE)))),
"xml")
close_and_write_netlogo_file(xml, Output_File)
}
devtools::load_all()
# Directory where the samples should be stored
FILEPATH<-"/home/kieran/Downloads/Model_and_all_files08012018/lhc_regen/"
# Parameters in simulation. List all the parameters that Netlogo is
# required to know
PARAMETERS <- c("farmer_influence_weight", "actor_attributes_weight", "eco_feedback_weight", "iwi_influence_weight",
"council_influence_weight", "central_influence_weight"	)
# Now values for each of the parameters above
# For parameters not being analysed, simply list the value
# For parameters being analysed, put the min and max values of the
# parameter in square brackets, in double quotes, e.g. "[0.1,0.5]"
# Encapsulate strings, i.e.: "\"/home/user/Experiment/\""
PARAMVALS <-c("[0,1]","[0.1,1]","[0,1]","[0,1]","[0,1]","[0,1]")
# Number of parameter samples to take from hypercube
NUMSAMPLES<-500
# Name of function that sets up Netlogo simulation. Usually setup
NETLOGO_SETUP_FUNCTION <- "setup"
# Name of function that starts Netlogo simulation. Usually go
NETLOGO_RUN_FUNCTION <- "go"
# Simulation output measures
MEASURES<- c("tally_habitat",  "area_variance" , "tally_covenant", "covenant_variance", "fraction_bush_covenant", "conservationist_farmers",
"conservationists_variance", "covenant_farmers", "fragment_count",  "fragments_variance", "fragment_max",  "frag_max_variance",
"fragment_min", "frag_min_variance",  "farmer_influence_weight", "actor_attributes_weight", "eco_feedback_weight", "iwi_influence_weight",
"council_influence_weight", "central_influence_weight", "edgedensity", "centralization", "compartmentalization", "isolates", "average_w_indegree",
"degree", "gsize", "mean_path", "entropy"
)
# Number of times the Netlogo experiment is repeated for each parameter
# set
EXPERIMENT_REPETITIONS <- 1
# Whether Netlogo metrics should be collected at each timestep
RUNMETRICS_EVERYSTEP <- "false" #I've changed this to 'false' from 'true' since some of the variables are produced only in the end /JY
# Algorithm to use to generate the hypercube (normal or optimal)
ALGORITHM<-"optimal" ##'optimal' can be very slow, but doesn't seem to be slow for us as it is now. /JY
lhc_generate_lhc_sample_netlogo(FILEPATH,PARAMETERS,PARAMVALS,NUMSAMPLES,ALGORITHM,
EXPERIMENT_REPETITIONS,RUNMETRICS_EVERYSTEP,NETLOGO_SETUP_FUNCTION,
NETLOGO_RUN_FUNCTION,MEASURES)
FILEPATH<-"/home/kieran/Downloads/Model_and_all_files08012018/lhc_regen/"
# Parameters in simulation. List all the parameters that Netlogo is
# required to know
PARAMETERS <- c("farmer_influence_weight", "actor_attributes_weight", "eco_feedback_weight", "iwi_influence_weight",
"council_influence_weight", "central_influence_weight"	)
# Now values for each of the parameters above
# For parameters not being analysed, simply list the value
# For parameters being analysed, put the min and max values of the
# parameter in square brackets, in double quotes, e.g. "[0.1,0.5]"
# Encapsulate strings, i.e.: "\"/home/user/Experiment/\""
PARAMVALS <-c("[0,1]","[0.1,1]","[0,1]","[0,1]","[0,1]","[0,1]")
# Number of parameter samples to take from hypercube
NUMSAMPLES<-500
# Name of function that sets up Netlogo simulation. Usually setup
NETLOGO_SETUP_FUNCTION <- "setup"
# Name of function that starts Netlogo simulation. Usually go
NETLOGO_RUN_FUNCTION <- "go"
# Simulation output measures
MEASURES<- c("tally_habitat",  "area_variance" , "tally_covenant", "covenant_variance", "fraction_bush_covenant", "conservationist_farmers",
"conservationists_variance", "covenant_farmers", "fragment_count",  "fragments_variance", "fragment_max",  "frag_max_variance",  "farmer_influence_weight", "actor_attributes_weight", "eco_feedback_weight", "iwi_influence_weight",
"council_influence_weight", "central_influence_weight", "edgedensity", "centralization", "compartmentalization", "isolates", "average_w_indegree",
"degree", "gsize", "mean_path", "entropy"
)
# Number of times the Netlogo experiment is repeated for each parameter
# set
EXPERIMENT_REPETITIONS <- 1
# Whether Netlogo metrics should be collected at each timestep
RUNMETRICS_EVERYSTEP <- "false" #I've changed this to 'false' from 'true' since some of the variables are produced only in the end /JY
# Algorithm to use to generate the hypercube (normal or optimal)
ALGORITHM<-"optimal" ##'optimal' can be very slow, but doesn't seem to be slow for us as it is now. /JY
lhc_generate_lhc_sample_netlogo(FILEPATH,PARAMETERS,PARAMVALS,NUMSAMPLES,ALGORITHM,
EXPERIMENT_REPETITIONS,RUNMETRICS_EVERYSTEP,NETLOGO_SETUP_FUNCTION,
NETLOGO_RUN_FUNCTION,MEASURES)
devtools::build()
install.packages("knitr")
devtools::build()
devtools::load_all(".")
install.packages("gplots")
devtools::load_all(".")
load("/home/kieran/Desktop/test.Rda")
parameters<-c("thresholdBindProbability","chemoThreshold","chemoUpperLinearAdjust","chemoLowerLinearAdjust","maxVCAMeffectProbabilityCutoff","vcamSlope")
measures<-c("Velocity","Displacement")
cor_calc_method=c("s")
COEFFRESULTS <- calculate_prccs_all_parameters(parameters, db_results,
measures, cor_calc_method)
db_results<-results
COEFFRESULTS <- calculate_prccs_all_parameters(parameters, db_results,
measures, cor_calc_method)
head(db_results)
COEFFRESULTS <- NULL
PARAMETERS<-parameters
k<-1
# Get coefficient set
COEFFDATA <- lhc_constructcoeff_dataset(LHCRESULTFILE, PARAMETERS[k],
PARAMETERS)
LHCRESULTFILE<-db_results
# Get coefficient set
COEFFDATA <- lhc_constructcoeff_dataset(LHCRESULTFILE, PARAMETERS[k],
PARAMETERS)
COEFFDATA
# Retrieve parameter result
COEFFPARAMCOL <- LHCRESULTFILE[, PARAMETERS[k]]
COEFFPARAMCOL
# Calculate coefficients
COEFFRESULTS <- rbind(COEFFRESULTS, calculate_prcc_for_all_measures(
MEASURES, COEFFPARAMCOL, COEFFDATA, LHCRESULTFILE, cor_calc_method))
MEASURES<-measures
# Calculate coefficients
COEFFRESULTS <- rbind(COEFFRESULTS, calculate_prcc_for_all_measures(
MEASURES, COEFFPARAMCOL, COEFFDATA, LHCRESULTFILE, cor_calc_method))
PARAM_RESULTS <- NULL
l<-1
COEFFMEASURERESULT <- LHCRESULTFILE[, MEASURES[l]]
COEFFMEASURERESULT
PARAMCOEFF <- pcor.test(COEFFPARAMCOL, COEFFMEASURERESULT,
COEFFDATA, calc_method=cor_calc_method, use=prcc_method)
prcc_method="mat"
PARAMCOEFF <- pcor.test(COEFFPARAMCOL, COEFFMEASURERESULT,
COEFFDATA, calc_method=cor_calc_method, use=prcc_method)
load("/home/kieran/Desktop/test.Rda")
db_results<-results
cor_calc_method=c("s")
message("Generating Partial Rank Correlation Coefficients (lhc_generatePRCoEffs)")
COEFFRESULTS <- calculate_prccs_all_parameters(parameters, db_results,
measures, cor_calc_method)
COEFFRESULTS <- NULL
# Get coefficient set
COEFFDATA <- lhc_constructcoeff_dataset(LHCRESULTFILE, PARAMETERS[k],
PARAMETERS)
# Retrieve parameter result
COEFFPARAMCOL <- LHCRESULTFILE[, PARAMETERS[k]]
# Calculate coefficients
COEFFRESULTS <- rbind(COEFFRESULTS, calculate_prcc_for_all_measures(
MEASURES, COEFFPARAMCOL, COEFFDATA, LHCRESULTFILE, cor_calc_method))
PARAM_RESULTS <- NULL
l<-1
COEFFMEASURERESULT <- LHCRESULTFILE[, MEASURES[l]]
PARAMCOEFF <- pcor.test(COEFFPARAMCOL, COEFFMEASURERESULT,
COEFFDATA, calc_method=cor_calc_method, use=prcc_method)
COEFFPARAMCOL
as.numeric(COEFFPARAMCOL)
COEFFMEASURERESULT
PARAMCOEFF <- pcor.test(as.numeric(COEFFPARAMCOL), as.numeric(COEFFMEASURERESULT),
COEFFDATA, calc_method=cor_calc_method, use=prcc_method)
COEFFDATA
as.numeric(COEFFDATA)
PARAMCOEFF <- pcor.test(COEFFPARAMCOL, COEFFMEASURERESULT,
COEFFDATA, calc_method=cor_calc_method, use=prcc_method)
db_results
COEFFRESULTS <- NULL
# Get coefficient set
COEFFDATA <- lhc_constructcoeff_dataset(LHCRESULTFILE, PARAMETERS[k],
PARAMETERS)
COEFFDATA
LHCRESULTFILE<-db_results
coeff_data <- NULL
coeff_headers <- NULL
m<-1
PARAMNAME<-PARAMETERS[1]
PARAMETERS[m] != PARAMNAME
m<-2
coeff_data <- cbind(coeff_data, LHCRESULTFILE[, PARAMETERS[m]])
coeff_data
coeff_data <- cbind(coeff_data, as.numeric(LHCRESULTFILE[, PARAMETERS[m]]))
coeff_data
coeff_data <- NULL
coeff_data <- cbind(coeff_data, as.numeric(LHCRESULTFILE[, PARAMETERS[m]]))
coeff_data
devtools::load_all(".")
# Get coefficient set
COEFFDATA <- lhc_constructcoeff_dataset(LHCRESULTFILE, PARAMETERS[k],
PARAMETERS)
COEFFDATA
# Retrieve parameter result
COEFFPARAMCOL <- LHCRESULTFILE[, PARAMETERS[k]]
COEFFPARAMCOL
# Retrieve parameter result
COEFFPARAMCOL <- as.numeric(LHCRESULTFILE[, PARAMETERS[k]])
COEFFPARAMCOL
# Calculate coefficients
COEFFRESULTS <- rbind(COEFFRESULTS, calculate_prcc_for_all_measures(
MEASURES, COEFFPARAMCOL, COEFFDATA, LHCRESULTFILE, cor_calc_method))
PARAM_RESULTS <- NULL
COEFFMEASURERESULT <- LHCRESULTFILE[, MEASURES[l]]
COEFFMEASURERESULT
COEFFMEASURERESULT <- as.numeric(LHCRESULTFILE[, MEASURES[l]])
COEFFMEASURERESULT
PARAMCOEFF <- pcor.test(COEFFPARAMCOL, COEFFMEASURERESULT,
COEFFDATA, calc_method=cor_calc_method, use=prcc_method)
PARAMCOEFF
devtools::load_all(".")
COEFFRESULTS <- calculate_prccs_all_parameters(parameters, db_results,
measures, cor_calc_method)
COEFFRESULTS
devtools::build()
devtools:::document()
devtools::build()
p<-1
m<-1
load("/home/kieran/Desktop/coeffs.Rda")
coeffs
corcoeffs<-coeffs
# Get the PRCC value for this pairing
corr_result <- corcoeffs[
p, paste(MEASURES[m], "_Estimate", sep = "")]
corr_result
# Get the PRCC value for this pairing
corr_result <- corcoeffs[
p, paste(measures[m], "_Estimate", sep = "")]
corr_result
corcoeffs
subset(corcoeffs, parameter=parameters[p] & measure=measures[m])
subset(corcoeffs, parameter==parameters[p] & measure==measures[m])
measure[m]
measures[m]
parameter[p]
parameters[p]
measures[m
]
p<-2
subset(corcoeffs, parameter==parameters[p] & measure==measures[m])
MEASURE_SCALE<-c("microns/min","microns")
subset(corcoeffs, parameter==parameters[p] & measure==measures[m],select=c(statistic_1))
# Get the PRCC value for this pairing
corr_result <- subset(corcoeffs, parameter==parameters[p] & measure==measures[m],select=c(statistic_1))
# Make filename, titles, and labels
titles <- make_graph_title(NULL, parameters[p], NULL, MEASURES[m],
MEASURE_SCALE[m],corr_result, TIMEPOINTSCALE)
# Make filename, titles, and labels
titles <- make_graph_title(NULL, parameters[p], NULL, MEASURES[m],
MEASURE_SCALE[m],as.numeric(corr_result), TIMEPOINTSCALE)
titles
db_results
# Create graphs
output_ggplot_graph(titles$file, OUTPUT_TYPE,
make_lhc_plot(db_result, titles))
OUTPUT_TYPE = c("PDF")
# Create graphs
output_ggplot_graph(titles$file, OUTPUT_TYPE,
make_lhc_plot(db_result, titles))
# Create graphs
output_ggplot_graph(titles$file, OUTPUT_TYPE,
make_lhc_plot(db_results, titles))
output_directory<-"/home/kieran/Desktop"
# Make filename, titles, and labels
titles <- make_graph_title(output_directory, parameters[p], NULL, MEASURES[m],
MEASURE_SCALE[m],as.numeric(corr_result), TIMEPOINTSCALE)
title
titles
# Filter the data to plot
data_to_plot <- data.frame(lhcresult[, PARAMETERS[p]],
lhcresult[, MEASURES[m]])
head(db_results)
# Create graphs
output_ggplot_graph(titles$file, OUTPUT_TYPE,
make_lhc_plot(db_results, titles))
db_results[,2]
a<-as.data.frame(db_results)
a[,2]
head(db_results)
make_lhc_plot <- function(data_to_plot, titles) {
output_graph <- ggplot(data_to_plot,
aes(x = data_to_plot[, 1],
y = data_to_plot[, 2])) +
geom_point(size = 0.5) +
scale_y_continuous(limits = c(
floor(min(as.numeric(data_to_plot[,2]))), ceiling(max(as.numeric(data_to_plot[, 2]))))) +
labs(x = titles$xlabel, y = titles$ylabel,
title = titles$title, subtitle = titles$sub_title) +
theme(axis.title = element_text(size = 7),
axis.text = element_text(size = 7),
plot.title = element_text(size = 9, hjust = 0.5),
plot.subtitle = element_text(size = 8, hjust = 0.5))
return(output_graph)
}
# Create graphs
output_ggplot_graph(titles$file, OUTPUT_TYPE,
make_lhc_plot(db_results, titles))
library(ggplot2)
# Create graphs
output_ggplot_graph(titles$file, OUTPUT_TYPE,
make_lhc_plot(db_results, titles))
devtools::load_all(".")
# Filter the data to plot
data_to_plot <- data.frame(db_results[, parameters[p]],
db_results[, measures[m]])
devtools::load_all(".")
# Create graphs
output_ggplot_graph(titles$file, OUTPUT_TYPE,
make_lhc_plot(db_results, titles))
