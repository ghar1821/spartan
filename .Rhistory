rmysql.settingsfile<-"/home/kja505/Documents/sql_settings/newspaper_search_results.cnf"
rmysql.db<-"spartan_ppsim"
storiesDb<-dbConnect(MySQL(),default.file=rmysql.settingsfile,group=rmysql.db)
dbSendQuery(rmysql.db, query)
query<-"CREATE TABLE spartan_experiment (
experiment_id INT NOT NULL AUTO_INCREMENT,
experiment_type VARCHAR(45) NOT NULL,
experiment_date DATETIME NOT NULL,
PRIMARY KEY (experiment_id),
UNIQUE INDEX experiment_id_UNIQUE (experiment_id ASC));"
dbSendQuery(rmysql.db, query)
dbSendQuery(mydb, "
CREATE TABLE books (
book_id INT,
title VARCHAR(50),
author VARCHAR(50));")
dbSendQuery(rmysql.db, "
CREATE TABLE books (
book_id INT,
title VARCHAR(50),
author VARCHAR(50));")
query<-"CREATE TABLE spartan_experiment (
experiment_id INT NOT NULL AUTO_INCREMENT,
experiment_type VARCHAR(45) NOT NULL,
experiment_date DATETIME NOT NULL,
PRIMARY KEY (experiment_id),
UNIQUE INDEX experiment_id_UNIQUE (experiment_id ASC));"
dbSendQuery(storiesDb, query)
#R needs a full path to find the settings file
rmysql.settingsfile<-"/home/kja505/Documents/sql_settings/newspaper_search_results.cnf"
rmysql.db<-"spartan_ppsim"
storiesDb<-dbConnect(MySQL(),default.file=rmysql.settingsfile,group=rmysql.db)
query<-"CREATE TABLE spartan_experiment (
experiment_id INT NOT NULL AUTO_INCREMENT,
experiment_type VARCHAR(45) NOT NULL,
experiment_date DATETIME NOT NULL,
PRIMARY KEY (experiment_id),
UNIQUE INDEX experiment_id_UNIQUE (experiment_id ASC));"
dbSendQuery(storiesDb, query)
query<-"CREATE TABLE spartan_parameters (
parameter_set_id INT NOT NULL AUTO_INCREMENT,
chemoThreshold VARCHAR(45) NOT NULL,
chemoUpperLinearAdjust VARCHAR(45) NOT NULL,
chemoLowerLinearAdjust VARCHAR(45) NOT NULL,
maxVCAMeffectProbabilityCutoff VARCHAR(45) NOT NULL,
vcamSlope VARCHAR(45) NOT NULL,
experiment_id INT NULL,
PRIMARY KEY (parameter_set_id),
INDEX experiment_id_idx (experiment_id ASC),
CONSTRAINT experiment_id
FOREIGN KEY (experiment_id)
REFERENCES spartan_experiment (experiment_id)
ON DELETE NO ACTION
ON UPDATE NO ACTION);"
dbSendQuery(dblink, query)
dblink<-dbConnect(MySQL(),default.file=rmysql.settingsfile,group=rmysql.db)
dbSendQuery(dblink, query)
dbSendQuery(dblink, query)
#disconnect to clean up the connection to the database
dbDisconnect(storiesDb)
#disconnect to clean up the connection to the database
dbDisconnect(dblink)
# R needs a full path to find the settings file
rmysql.settingsfile<-"/home/kja505/Documents/sql_settings/newspaper_search_results.cnf"
rmysql.db<-"spartan_ppsim"
dblink<-dbConnect(MySQL(),default.file=rmysql.settingsfile,group=rmysql.db)
query<-"CREATE TABLE spartan_parameters (
parameter_set_id INT NOT NULL AUTO_INCREMENT,
chemoThreshold VARCHAR(45) NOT NULL,
chemoUpperLinearAdjust VARCHAR(45) NOT NULL,
chemoLowerLinearAdjust VARCHAR(45) NOT NULL,
maxVCAMeffectProbabilityCutoff VARCHAR(45) NOT NULL,
vcamSlope VARCHAR(45) NOT NULL,
experiment_id INT NULL,
PRIMARY KEY (parameter_set_id),
INDEX experiment_id_idx (experiment_id ASC),
CONSTRAINT experiment_id
FOREIGN KEY (experiment_id)
REFERENCES spartan_experiment (experiment_id)
ON DELETE NO ACTION
ON UPDATE NO ACTION);"
dbSendQuery(dblink, query)
PARAMETERS<- "chemoThreshold","chemoUpperLinearAdjust","chemoLowerLinearAdjust","maxVCAMeffectProbabilityCutoff","vcamSlope"
PARAMETERS<-c("chemoThreshold","chemoUpperLinearAdjust","chemoLowerLinearAdjust","maxVCAMeffectProbabilityCutoff","vcamSlope")
PARAMETERS
collapse(PARAMETERS)
for(parameter in parameters)
{
print parameter
}
print(parameter)
for(parameter in parameters)
{
print(parameter)
}
parameters<-PARAMETERS
for(parameter in parameters)
{
print(parameter)
}
field_string<-""
for(parameter in parameters)
{
field_string <- paste(field_string, parameter, "VARCHAR(45) NOT NULL,",sep="")
}
field_string
dbDisconnect(dblink)
# R needs a full path to find the settings file
rmysql.settingsfile<-"/home/kja505/Documents/sql_settings/newspaper_search_results.cnf"
rmysql.db<-"spartan_ppsim"
dblink<-dbConnect(MySQL(),default.file=rmysql.settingsfile,group=rmysql.db)
field_string<-""
for(parameter in parameters)
{
field_string <- paste(field_string, parameter, "VARCHAR(45) NOT NULL,",sep="")
}
query<-paste("CREATE TABLE spartan_parameters (
parameter_set_id INT NOT NULL AUTO_INCREMENT,",
field_string,
"experiment_id INT NULL,
PRIMARY KEY (parameter_set_id),
INDEX experiment_id_idx (experiment_id ASC),
CONSTRAINT experiment_id
FOREIGN KEY (experiment_id)
REFERENCES spartan_experiment (experiment_id)
ON DELETE NO ACTION
ON UPDATE NO ACTION);",sep="")
query
dbSendQuery(dblink, query)
query<-paste("CREATE TABLE spartan_parameters (
parameter_set_id INT NOT NULL AUTO_INCREMENT,",
field_string,
"experiment_id INT NULL,
PRIMARY KEY (parameter_set_id),
INDEX experiment_id_idx (experiment_id ASC),
CONSTRAINT experiment_id
FOREIGN KEY (experiment_id)
REFERENCES spartan_experiment (experiment_id)
ON DELETE NO ACTION
ON UPDATE NO ACTION);",sep="")
query
query<-paste("CREATE TABLE spartan_parameters (
parameter_set_id INT NOT NULL AUTO_INCREMENT,",
field_string,
"experiment_id INT NULL,
PRIMARY KEY (parameter_set_id),
INDEX experiment_id_idx (experiment_id ASC),
CONSTRAINT experiment_id
FOREIGN KEY (experiment_id)
REFERENCES spartan_experiment (experiment_id)
ON DELETE NO ACTION
ON UPDATE NO ACTION);",sep="")
query
query<-paste("CREATE TABLE spartan_parameters (parameter_set_id INT NOT NULL AUTO_INCREMENT,",
field_string,
"experiment_id INT NULL,
PRIMARY KEY (parameter_set_id),
INDEX experiment_id_idx (experiment_id ASC),
CONSTRAINT experiment_id
FOREIGN KEY (experiment_id)
REFERENCES spartan_experiment (experiment_id)
ON DELETE NO ACTION
ON UPDATE NO ACTION);",sep="")
query
field_string<-""
for(parameter in parameters)
{
field_string <- paste(field_string, parameter, " VARCHAR(45) NOT NULL,",sep="")
}
field_string<-""
for(parameter in parameters)
{
field_string <- paste(field_string, parameter, " VARCHAR(45) NOT NULL,",sep="")
}
query<-paste("CREATE TABLE spartan_parameters (parameter_set_id INT NOT NULL AUTO_INCREMENT,",
field_string,
"experiment_id INT NULL,
PRIMARY KEY (parameter_set_id),
INDEX experiment_id_idx (experiment_id ASC),
CONSTRAINT experiment_id
FOREIGN KEY (experiment_id)
REFERENCES spartan_experiment (experiment_id)
ON DELETE NO ACTION
ON UPDATE NO ACTION);",sep="")
dbSendQuery(dblink, query)
MEASURES<-c("Velocity","Displacement")
measures<-MEASURES
field_string <- create_field_string(measures)
create_field_string <- function(field_list)
{
field_string<-""
for(parameter in parameters)
{
field_string <- paste(field_string, parameter, " VARCHAR(45) NOT NULL,",sep="")
}
return(field_string)
}
field_string <- create_field_string(measures)
query<-paste("CREATE TABLE spartan_results (result_set_id INT NOT NULL AUTO_INCREMENT,",
field_string,
"experiment_id INT NULL,
parameter_set_id INT NULL,
PRIMARY KEY (result_set_id),
INDEX result_set_id_idx (result_set_id ASC),
CONSTRAINT experiment_id
FOREIGN KEY (experiment_id)
REFERENCES spartan_experiment (experiment_id)
CONSTRAINT parameter_set_id
FOREIGN KEY (parameter_set_id)
REFERENCES spartan_parameters (parameter_set_id)
ON DELETE NO ACTION
ON UPDATE NO ACTION);",sep="")
query
query<-paste("CREATE TABLE spartan_parameters (parameter_set_id INT NOT NULL AUTO_INCREMENT,",
field_string,
"experiment_id INT NULL,
PRIMARY KEY (parameter_set_id),
INDEX experiment_id_idx (experiment_id ASC),
CONSTRAINT experiment_id
FOREIGN KEY (experiment_id)
REFERENCES spartan_experiment (experiment_id)
ON DELETE NO ACTION
ON UPDATE NO ACTION);",sep="")
query
query<-paste("CREATE TABLE spartan_results (result_set_id INT NOT NULL AUTO_INCREMENT,",
field_string,
"experiment_id INT NULL,
parameter_set_id INT NULL,
PRIMARY KEY (result_set_id),
INDEX result_set_id_idx (result_set_id ASC),
CONSTRAINT experiment_id
FOREIGN KEY (experiment_id)
REFERENCES spartan_experiment (experiment_id)
CONSTRAINT parameter_set_id
FOREIGN KEY (parameter_set_id)
REFERENCES spartan_parameters (parameter_set_id)
ON DELETE NO ACTION
ON UPDATE NO ACTION);",sep="")
dbSendQuery(dblink, query)
query<-paste("CREATE TABLE spartan_results (
result_set_id INT NOT NULL AUTO_INCREMENT,",
field_string,
"experiment_id VARCHAR(45) NOT NULL,
parameter_set_id VARCHAR(45) NOT NULL,
PRIMARY KEY (result_set_id),
UNIQUE INDEX result_set_id_UNIQUE (result_set_id ASC),
INDEX experiment_id_idx (experiment_id ASC),
INDEX parameter_set_id_idx (parameter_set_id ASC),
CONSTRAINT experiment_id
FOREIGN KEY (experiment_id)
REFERENCES spartan_experiment (experiment_id)
ON DELETE NO ACTION
ON UPDATE NO ACTION,
CONSTRAINT parameter_set_id
FOREIGN KEY (parameter_set_id)
REFERENCES spartan_parameters (parameter_set_id)
ON DELETE NO ACTION
ON UPDATE NO ACTION);",sep="")
query
dbSendQuery(dblink, query)
query<-paste("CREATE TABLE spartan_results (
result_set_id INT NOT NULL AUTO_INCREMENT,",
field_string,
"experiment_id INT NOT NULL,
parameter_set_id INT NOT NULL,
PRIMARY KEY (result_set_id),
UNIQUE INDEX result_set_id_UNIQUE (result_set_id ASC),
INDEX experiment_id_idx (experiment_id ASC),
INDEX parameter_set_id_idx (parameter_set_id ASC),
CONSTRAINT experiment_id
FOREIGN KEY (experiment_id)
REFERENCES spartan_experiment (experiment_id)
ON DELETE NO ACTION
ON UPDATE NO ACTION,
CONSTRAINT parameter_set_id
FOREIGN KEY (parameter_set_id)
REFERENCES spartan_parameters (parameter_set_id)
ON DELETE NO ACTION
ON UPDATE NO ACTION);",sep="")
dbSendQuery(dblink, query)
query<-paste("CREATE TABLE spartan_results (
result_set_id INT NOT NULL AUTO_INCREMENT,",
field_string,
"parameter_set_id INT NOT NULL,
PRIMARY KEY (result_set_id),
UNIQUE INDEX result_set_id_UNIQUE (result_set_id ASC),
INDEX parameter_set_id_idx (parameter_set_id ASC),
CONSTRAINT parameter_set_id
FOREIGN KEY (parameter_set_id)
REFERENCES spartan_parameters (parameter_set_id)
ON DELETE NO ACTION
ON UPDATE NO ACTION);",sep="")
dbSendQuery(dblink, query)
query<-paste("CREATE TABLE spartan_analysed_results (
analysed_set_id INT NOT NULL AUTO_INCREMENT,",
field_string,
"parameter_set_id INT NOT NULL,
PRIMARY KEY (analysed_set_id),
UNIQUE INDEX result_set_id_UNIQUE (analysed_set_id ASC),
INDEX analysed_set_id_idx (analysed_set_id ASC),
CONSTRAINT parameter_set_id
FOREIGN KEY (parameter_set_id)
REFERENCES spartan_parameters (parameter_set_id)
ON DELETE NO ACTION
ON UPDATE NO ACTION);",sep="")
dbSendQuery(dblink, query)
query<-paste("CREATE TABLE spartan_analysed_results (
analysed_set_id INT NOT NULL AUTO_INCREMENT,",
field_string,
"parameter_set_id INT NOT NULL,
PRIMARY KEY (analysed_set_id),
UNIQUE INDEX analysed_set_id_UNIQUE (analysed_set_id ASC),
INDEX analysed_set_id_idx (analysed_set_id ASC),
CONSTRAINT parameter_set_id
FOREIGN KEY (parameter_set_id)
REFERENCES spartan_parameters (parameter_set_id)
ON DELETE NO ACTION
ON UPDATE NO ACTION);",sep="")
dbSendQuery(dblink, query)
query<-paste("CREATE TABLE spartan_analysed_results (
analysed_set_id INT NOT NULL AUTO_INCREMENT,",
field_string,
"parameter_set_id INT NOT NULL,
PRIMARY KEY (analysed_set_id),
UNIQUE INDEX analysed_set_id_UNIQUE (analysed_set_id ASC),
INDEX analysed_set_id_idx (analysed_set_id ASC),
CONSTRAINT parameter_set_id
FOREIGN KEY (parameter_set_id)
REFERENCES spartan_parameters (parameter_set_id)
ON DELETE NO ACTION
ON UPDATE NO ACTION);",sep="")
query
dbSendQuery(dblink, query)
query<-paste("CREATE TABLE spartan_analysed_results (
analysed_set_id INT NOT NULL AUTO_INCREMENT,",
field_string,
"parameter_set_id INT NOT NULL,
PRIMARY KEY (analysed_set_id),
UNIQUE INDEX analysed_set_id_UNIQUE (analysed_set_id ASC),
INDEX analysed_set_id_idx (analysed_set_id ASC),
CONSTRAINT parameter_set_id
FOREIGN KEY (parameter_set_id)
REFERENCES spartan_parameters (parameter_set_id)
ON DELETE NO ACTION
ON UPDATE NO ACTION);",sep="")
dbSendQuery(dblink, query)
query<-paste("CREATE TABLE spartan_analysed_results (analysed_set_id INT NOT NULL AUTO_INCREMENT,"
field_string,
"Velocity VARCHAR(45) NOT NULL,
Displacement VARCHAR(45) NOT NULL,
parameter_set_id INT NOT NULL,
PRIMARY KEY (analysed_set_id),
UNIQUE INDEX analysed_set_id_UNIQUE (analysed_set_id ASC),
INDEX parameter_set_id_idx (parameter_set_id ASC),
CONSTRAINT parameter_set_id
FOREIGN KEY (parameter_set_id)
REFERENCES spartan_parameters` (parameter_set_id)
ON DELETE NO ACTION
ON UPDATE NO ACTION);",sep="")
query<-paste("CREATE TABLE spartan_analysed_results (analysed_set_id INT NOT NULL AUTO_INCREMENT,",
field_string,
"Velocity VARCHAR(45) NOT NULL,
Displacement VARCHAR(45) NOT NULL,
parameter_set_id INT NOT NULL,
PRIMARY KEY (analysed_set_id),
UNIQUE INDEX analysed_set_id_UNIQUE (analysed_set_id ASC),
INDEX parameter_set_id_idx (parameter_set_id ASC),
CONSTRAINT parameter_set_id
FOREIGN KEY (parameter_set_id)
REFERENCES spartan_parameters` (parameter_set_id)
ON DELETE NO ACTION
ON UPDATE NO ACTION);",sep="")
dbSendQuery(dblink, query)
query<-paste("CREATE TABLE spartan_analysed_results (analysed_set_id INT NOT NULL AUTO_INCREMENT,",
field_string,
"Velocity VARCHAR(45) NOT NULL,
Displacement VARCHAR(45) NOT NULL,
parameter_set_id INT NOT NULL,
PRIMARY KEY (analysed_set_id),
UNIQUE INDEX analysed_set_id_UNIQUE (analysed_set_id ASC),
INDEX parameter_set_id_idx (parameter_set_id ASC),
CONSTRAINT parameter_set_id
FOREIGN KEY (parameter_set_id)
REFERENCES spartan_parameters (parameter_set_id)
ON DELETE NO ACTION
ON UPDATE NO ACTION);",sep="")
dbSendQuery(dblink, query)
query<-paste("CREATE TABLE spartan_analysed_results (analysed_set_id INT NOT NULL AUTO_INCREMENT,",
field_string,
"Velocity VARCHAR(45) NOT NULL,
Displacement VARCHAR(45) NOT NULL,
summarising_parameter_set_id INT NOT NULL,
PRIMARY KEY (analysed_set_id),
UNIQUE INDEX analysed_set_id_UNIQUE (analysed_set_id ASC),
INDEX parameter_set_id_idx (parameter_set_id ASC),
CONSTRAINT summarising_parameter_set_id
FOREIGN KEY (summarising_parameter_set_id)
REFERENCES spartan_parameters (parameter_set_id)
ON DELETE NO ACTION
ON UPDATE NO ACTION);",sep="")
dbSendQuery(dblink, query)
query<-paste("CREATE TABLE spartan_analysed_results (analysed_set_id INT NOT NULL AUTO_INCREMENT,",
field_string,
"Velocity VARCHAR(45) NOT NULL,
Displacement VARCHAR(45) NOT NULL,
summarising_parameter_set_id INT NOT NULL,
PRIMARY KEY (analysed_set_id),
UNIQUE INDEX analysed_set_id_UNIQUE (analysed_set_id ASC),
INDEX summarising_parameter_set_id_idx (summarising_parameter_set_id ASC),
CONSTRAINT summarising_parameter_set_id
FOREIGN KEY (summarising_parameter_set_id)
REFERENCES spartan_parameters (parameter_set_id)
ON DELETE NO ACTION
ON UPDATE NO ACTION);",sep="")
dbSendQuery(dblink, query)
library(spartan)
# Directory where the example simulation results for this technique were extracted
# (i.e. the results downloaded from the website)
FILEPATH <- "/home/user/AA"
# Sample sizes (number of simulation replicates in each distribution) to be analysed
SAMPLESIZES <- c(1, 5, 50, 100, 300)
# The simulation output measures to be analysed
MEASURES <- c("Velocity", "Displacement")
# Number of distributions being compared. Default: 20, as performed by Read et al
NUMSUBSETSPERSAMPLESIZE <- 20
# Output file name containing the simulation responses.
RESULTFILENAME <- "trackedCells_Close.csv"
# Not used in this case. Useful where two result files exist (e.g.\ if tracking cells
# close and those further away, two output files could be used). Here, results in a
# second file are processed if the first is blank or does not exist. Defaults to NULL
# if not specified
ALTFILENAME <- NULL
# Notes the column in the CSV results file where the results start.
# Useful as it restricts what is read in to R, getting round potential errors where
# the first column contains a label
OUTPUTFILECOLSTART <- 10
# Last column of the output measure results
OUTPUTFILECOLEND <- 11
# Use this if simulation results are in CSV format.
# Last column of the output measure results
OUTPUTFILECOLEND <- 11
# File either A: created by method 1 of this technique, containing the median of each
# output measure of each simulation run in that subset, or B: The name of the provided
# single CSV file containing the simulation responses. So if you are using the CSV
# structured tutorial data, this fill be the name of that CSV file.
MEDIANS_SUMMARY_FILE_NAME <- "AA_SimResponses.csv"
# The results of the A-Test comparisons of the twenty subsets for each sample size
# are stored within an output file. This parameter sets the name of this file.
# Note no file extension. Current versions of spartan output to CSV files
ATESTRESULTSFILENAME <- "AA_ATest_Scores.csv"
# A summary file is created containing the maximum and median
# A-Test values for each sample size. This parameter sets the name of this file.
SUMMARYFILENAME <- "AA_ATestMaxAndMedians.csv"
# The A-Test value either side of 0.5 which should be considered a 'large difference'
# between two sets of results. Use of 0.23 was taken from the Vargha-Delaney
# publication but can be adjusted here as necessary.
LARGEDIFFINDICATOR <- 0.23
# A-Test values above 0.5 (no difference) which should be considered as small,
# medium, and large differences between two result sets. Used in the graph
# summarising all sample sizes.
SMALL <- 0.56
MEDIUM <- 0.66
LARGE <- 0.73
# Name of the graph which summarises the analysis results for all sample sizes.
# Current versions of spartan output to pdf.
GRAPHOUTPUTFILE <- "AA_ATestMaxes.pdf"
FILEPATH<-"/home/kja505/Downloads/AA_Spartan2_July14/AA_Spartan2/Folder_Structured/"
aa_summariseReplicateRuns(FILEPATH, SAMPLESIZES, MEASURES, RESULTFILENAME, ALTFILENAME, OUTPUTFILECOLSTART, OUTPUTFILECOLEND, MEDIANS_SUMMARY_FILE_NAME)
devtools::load_all(".")
aa_summariseReplicateRuns(FILEPATH, SAMPLESIZES, MEASURES, RESULTFILENAME, ALTFILENAME, OUTPUTFILECOLSTART, OUTPUTFILECOLEND, MEDIANS_SUMMARY_FILE_NAME)
devtools::load_all(".")
aa_summariseReplicateRuns(FILEPATH, SAMPLESIZES, MEASURES, RESULTFILENAME, ALTFILENAME, OUTPUTFILECOLSTART, OUTPUTFILECOLEND, MEDIANS_SUMMARY_FILE_NAME)
devtools::load_all(".")
aa_summariseReplicateRuns(FILEPATH, SAMPLESIZES, MEASURES, RESULTFILENAME, ALTFILENAME, OUTPUTFILECOLSTART, OUTPUTFILECOLEND, MEDIANS_SUMMARY_FILE_NAME)
a_test_results <- aa_getATestResults(FILEPATH, SAMPLESIZES, NUMSUBSETSPERSAMPLESIZE, MEASURES, ATESTRESULTSFILENAME, LARGEDIFFINDICATOR, AA_SIM_RESULTS_FILE = MEDIANS_SUMMARY_FILE_NAME)
AA_SIM_RESULTS_FILE
MEDIANS_SUMMARY_FILE_NAME
devtools::load_all(".")
devtools::load_all(".")
a_test_results <- aa_getATestResults(FILEPATH, SAMPLESIZES, NUMSUBSETSPERSAMPLESIZE, MEASURES, ATESTRESULTSFILENAME, LARGEDIFFINDICATOR, AA_SIM_RESULTS_FILE = MEDIANS_SUMMARY_FILE_NAME)
sample_summary <- aa_sampleSizeSummary(FILEPATH, SAMPLESIZES, MEASURES, SUMMARYFILENAME, ATESTRESULTS_FILE = ATESTRESULTSFILENAME)
aa_graphSampleSizeSummary(FILEPATH, MEASURES, 300, SMALL, MEDIUM, LARGE, GRAPHOUTPUTFILE, SAMPLESUMMARY_FILE = SUMMARYFILENAME)
devtools::build()
devtools::load_all(".")
devtools::build()
devtools::load_all(".")
devtools::build()
devtools::load_all(".")
devtools::build()
library(shiny)
install.packages(shiny)
install.packages("shiny")
devtools::load_all(".")
devtools::build()
devtools::build()
devtools::build()
devtools::build()
devtools::build()
devtools::build()
devtools::build()
devtools::load_all(".")
devtools::build()
devtools::build()
devtools::build()
devtools::build()
library(spartan)
devtools::build()
devtools::build()
devtools::build()
devtools::build()
devtools::build()
devtools::load_all(".")
