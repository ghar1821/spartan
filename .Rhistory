FOREIGN KEY (experiment_id)
REFERENCES spartan_experiment (experiment_id)
ON DELETE NO ACTION
ON UPDATE NO ACTION);",sep="")
query
dbSendQuery(dblink, query)
query<-paste("CREATE TABLE spartan_parameters (
parameter_set_id INT NOT NULL AUTO_INCREMENT,",
field_string,
"experiment_id INT NULL,
PRIMARY KEY (parameter_set_id),
INDEX experiment_id_idx (experiment_id ASC),
CONSTRAINT experiment_id
FOREIGN KEY (experiment_id)
REFERENCES spartan_experiment (experiment_id)
ON DELETE NO ACTION
ON UPDATE NO ACTION);",sep="")
query
query<-paste("CREATE TABLE spartan_parameters (
parameter_set_id INT NOT NULL AUTO_INCREMENT,",
field_string,
"experiment_id INT NULL,
PRIMARY KEY (parameter_set_id),
INDEX experiment_id_idx (experiment_id ASC),
CONSTRAINT experiment_id
FOREIGN KEY (experiment_id)
REFERENCES spartan_experiment (experiment_id)
ON DELETE NO ACTION
ON UPDATE NO ACTION);",sep="")
query
query<-paste("CREATE TABLE spartan_parameters (parameter_set_id INT NOT NULL AUTO_INCREMENT,",
field_string,
"experiment_id INT NULL,
PRIMARY KEY (parameter_set_id),
INDEX experiment_id_idx (experiment_id ASC),
CONSTRAINT experiment_id
FOREIGN KEY (experiment_id)
REFERENCES spartan_experiment (experiment_id)
ON DELETE NO ACTION
ON UPDATE NO ACTION);",sep="")
query
field_string<-""
for(parameter in parameters)
{
field_string <- paste(field_string, parameter, " VARCHAR(45) NOT NULL,",sep="")
}
field_string<-""
for(parameter in parameters)
{
field_string <- paste(field_string, parameter, " VARCHAR(45) NOT NULL,",sep="")
}
query<-paste("CREATE TABLE spartan_parameters (parameter_set_id INT NOT NULL AUTO_INCREMENT,",
field_string,
"experiment_id INT NULL,
PRIMARY KEY (parameter_set_id),
INDEX experiment_id_idx (experiment_id ASC),
CONSTRAINT experiment_id
FOREIGN KEY (experiment_id)
REFERENCES spartan_experiment (experiment_id)
ON DELETE NO ACTION
ON UPDATE NO ACTION);",sep="")
dbSendQuery(dblink, query)
MEASURES<-c("Velocity","Displacement")
measures<-MEASURES
field_string <- create_field_string(measures)
create_field_string <- function(field_list)
{
field_string<-""
for(parameter in parameters)
{
field_string <- paste(field_string, parameter, " VARCHAR(45) NOT NULL,",sep="")
}
return(field_string)
}
field_string <- create_field_string(measures)
query<-paste("CREATE TABLE spartan_results (result_set_id INT NOT NULL AUTO_INCREMENT,",
field_string,
"experiment_id INT NULL,
parameter_set_id INT NULL,
PRIMARY KEY (result_set_id),
INDEX result_set_id_idx (result_set_id ASC),
CONSTRAINT experiment_id
FOREIGN KEY (experiment_id)
REFERENCES spartan_experiment (experiment_id)
CONSTRAINT parameter_set_id
FOREIGN KEY (parameter_set_id)
REFERENCES spartan_parameters (parameter_set_id)
ON DELETE NO ACTION
ON UPDATE NO ACTION);",sep="")
query
query<-paste("CREATE TABLE spartan_parameters (parameter_set_id INT NOT NULL AUTO_INCREMENT,",
field_string,
"experiment_id INT NULL,
PRIMARY KEY (parameter_set_id),
INDEX experiment_id_idx (experiment_id ASC),
CONSTRAINT experiment_id
FOREIGN KEY (experiment_id)
REFERENCES spartan_experiment (experiment_id)
ON DELETE NO ACTION
ON UPDATE NO ACTION);",sep="")
query
query<-paste("CREATE TABLE spartan_results (result_set_id INT NOT NULL AUTO_INCREMENT,",
field_string,
"experiment_id INT NULL,
parameter_set_id INT NULL,
PRIMARY KEY (result_set_id),
INDEX result_set_id_idx (result_set_id ASC),
CONSTRAINT experiment_id
FOREIGN KEY (experiment_id)
REFERENCES spartan_experiment (experiment_id)
CONSTRAINT parameter_set_id
FOREIGN KEY (parameter_set_id)
REFERENCES spartan_parameters (parameter_set_id)
ON DELETE NO ACTION
ON UPDATE NO ACTION);",sep="")
dbSendQuery(dblink, query)
query<-paste("CREATE TABLE spartan_results (
result_set_id INT NOT NULL AUTO_INCREMENT,",
field_string,
"experiment_id VARCHAR(45) NOT NULL,
parameter_set_id VARCHAR(45) NOT NULL,
PRIMARY KEY (result_set_id),
UNIQUE INDEX result_set_id_UNIQUE (result_set_id ASC),
INDEX experiment_id_idx (experiment_id ASC),
INDEX parameter_set_id_idx (parameter_set_id ASC),
CONSTRAINT experiment_id
FOREIGN KEY (experiment_id)
REFERENCES spartan_experiment (experiment_id)
ON DELETE NO ACTION
ON UPDATE NO ACTION,
CONSTRAINT parameter_set_id
FOREIGN KEY (parameter_set_id)
REFERENCES spartan_parameters (parameter_set_id)
ON DELETE NO ACTION
ON UPDATE NO ACTION);",sep="")
query
dbSendQuery(dblink, query)
query<-paste("CREATE TABLE spartan_results (
result_set_id INT NOT NULL AUTO_INCREMENT,",
field_string,
"experiment_id INT NOT NULL,
parameter_set_id INT NOT NULL,
PRIMARY KEY (result_set_id),
UNIQUE INDEX result_set_id_UNIQUE (result_set_id ASC),
INDEX experiment_id_idx (experiment_id ASC),
INDEX parameter_set_id_idx (parameter_set_id ASC),
CONSTRAINT experiment_id
FOREIGN KEY (experiment_id)
REFERENCES spartan_experiment (experiment_id)
ON DELETE NO ACTION
ON UPDATE NO ACTION,
CONSTRAINT parameter_set_id
FOREIGN KEY (parameter_set_id)
REFERENCES spartan_parameters (parameter_set_id)
ON DELETE NO ACTION
ON UPDATE NO ACTION);",sep="")
dbSendQuery(dblink, query)
query<-paste("CREATE TABLE spartan_results (
result_set_id INT NOT NULL AUTO_INCREMENT,",
field_string,
"parameter_set_id INT NOT NULL,
PRIMARY KEY (result_set_id),
UNIQUE INDEX result_set_id_UNIQUE (result_set_id ASC),
INDEX parameter_set_id_idx (parameter_set_id ASC),
CONSTRAINT parameter_set_id
FOREIGN KEY (parameter_set_id)
REFERENCES spartan_parameters (parameter_set_id)
ON DELETE NO ACTION
ON UPDATE NO ACTION);",sep="")
dbSendQuery(dblink, query)
query<-paste("CREATE TABLE spartan_analysed_results (
analysed_set_id INT NOT NULL AUTO_INCREMENT,",
field_string,
"parameter_set_id INT NOT NULL,
PRIMARY KEY (analysed_set_id),
UNIQUE INDEX result_set_id_UNIQUE (analysed_set_id ASC),
INDEX analysed_set_id_idx (analysed_set_id ASC),
CONSTRAINT parameter_set_id
FOREIGN KEY (parameter_set_id)
REFERENCES spartan_parameters (parameter_set_id)
ON DELETE NO ACTION
ON UPDATE NO ACTION);",sep="")
dbSendQuery(dblink, query)
query<-paste("CREATE TABLE spartan_analysed_results (
analysed_set_id INT NOT NULL AUTO_INCREMENT,",
field_string,
"parameter_set_id INT NOT NULL,
PRIMARY KEY (analysed_set_id),
UNIQUE INDEX analysed_set_id_UNIQUE (analysed_set_id ASC),
INDEX analysed_set_id_idx (analysed_set_id ASC),
CONSTRAINT parameter_set_id
FOREIGN KEY (parameter_set_id)
REFERENCES spartan_parameters (parameter_set_id)
ON DELETE NO ACTION
ON UPDATE NO ACTION);",sep="")
dbSendQuery(dblink, query)
query<-paste("CREATE TABLE spartan_analysed_results (
analysed_set_id INT NOT NULL AUTO_INCREMENT,",
field_string,
"parameter_set_id INT NOT NULL,
PRIMARY KEY (analysed_set_id),
UNIQUE INDEX analysed_set_id_UNIQUE (analysed_set_id ASC),
INDEX analysed_set_id_idx (analysed_set_id ASC),
CONSTRAINT parameter_set_id
FOREIGN KEY (parameter_set_id)
REFERENCES spartan_parameters (parameter_set_id)
ON DELETE NO ACTION
ON UPDATE NO ACTION);",sep="")
query
dbSendQuery(dblink, query)
query<-paste("CREATE TABLE spartan_analysed_results (
analysed_set_id INT NOT NULL AUTO_INCREMENT,",
field_string,
"parameter_set_id INT NOT NULL,
PRIMARY KEY (analysed_set_id),
UNIQUE INDEX analysed_set_id_UNIQUE (analysed_set_id ASC),
INDEX analysed_set_id_idx (analysed_set_id ASC),
CONSTRAINT parameter_set_id
FOREIGN KEY (parameter_set_id)
REFERENCES spartan_parameters (parameter_set_id)
ON DELETE NO ACTION
ON UPDATE NO ACTION);",sep="")
dbSendQuery(dblink, query)
query<-paste("CREATE TABLE spartan_analysed_results (analysed_set_id INT NOT NULL AUTO_INCREMENT,"
field_string,
"Velocity VARCHAR(45) NOT NULL,
Displacement VARCHAR(45) NOT NULL,
parameter_set_id INT NOT NULL,
PRIMARY KEY (analysed_set_id),
UNIQUE INDEX analysed_set_id_UNIQUE (analysed_set_id ASC),
INDEX parameter_set_id_idx (parameter_set_id ASC),
CONSTRAINT parameter_set_id
FOREIGN KEY (parameter_set_id)
REFERENCES spartan_parameters` (parameter_set_id)
ON DELETE NO ACTION
ON UPDATE NO ACTION);",sep="")
query<-paste("CREATE TABLE spartan_analysed_results (analysed_set_id INT NOT NULL AUTO_INCREMENT,",
field_string,
"Velocity VARCHAR(45) NOT NULL,
Displacement VARCHAR(45) NOT NULL,
parameter_set_id INT NOT NULL,
PRIMARY KEY (analysed_set_id),
UNIQUE INDEX analysed_set_id_UNIQUE (analysed_set_id ASC),
INDEX parameter_set_id_idx (parameter_set_id ASC),
CONSTRAINT parameter_set_id
FOREIGN KEY (parameter_set_id)
REFERENCES spartan_parameters` (parameter_set_id)
ON DELETE NO ACTION
ON UPDATE NO ACTION);",sep="")
dbSendQuery(dblink, query)
query<-paste("CREATE TABLE spartan_analysed_results (analysed_set_id INT NOT NULL AUTO_INCREMENT,",
field_string,
"Velocity VARCHAR(45) NOT NULL,
Displacement VARCHAR(45) NOT NULL,
parameter_set_id INT NOT NULL,
PRIMARY KEY (analysed_set_id),
UNIQUE INDEX analysed_set_id_UNIQUE (analysed_set_id ASC),
INDEX parameter_set_id_idx (parameter_set_id ASC),
CONSTRAINT parameter_set_id
FOREIGN KEY (parameter_set_id)
REFERENCES spartan_parameters (parameter_set_id)
ON DELETE NO ACTION
ON UPDATE NO ACTION);",sep="")
dbSendQuery(dblink, query)
query<-paste("CREATE TABLE spartan_analysed_results (analysed_set_id INT NOT NULL AUTO_INCREMENT,",
field_string,
"Velocity VARCHAR(45) NOT NULL,
Displacement VARCHAR(45) NOT NULL,
summarising_parameter_set_id INT NOT NULL,
PRIMARY KEY (analysed_set_id),
UNIQUE INDEX analysed_set_id_UNIQUE (analysed_set_id ASC),
INDEX parameter_set_id_idx (parameter_set_id ASC),
CONSTRAINT summarising_parameter_set_id
FOREIGN KEY (summarising_parameter_set_id)
REFERENCES spartan_parameters (parameter_set_id)
ON DELETE NO ACTION
ON UPDATE NO ACTION);",sep="")
dbSendQuery(dblink, query)
query<-paste("CREATE TABLE spartan_analysed_results (analysed_set_id INT NOT NULL AUTO_INCREMENT,",
field_string,
"Velocity VARCHAR(45) NOT NULL,
Displacement VARCHAR(45) NOT NULL,
summarising_parameter_set_id INT NOT NULL,
PRIMARY KEY (analysed_set_id),
UNIQUE INDEX analysed_set_id_UNIQUE (analysed_set_id ASC),
INDEX summarising_parameter_set_id_idx (summarising_parameter_set_id ASC),
CONSTRAINT summarising_parameter_set_id
FOREIGN KEY (summarising_parameter_set_id)
REFERENCES spartan_parameters (parameter_set_id)
ON DELETE NO ACTION
ON UPDATE NO ACTION);",sep="")
dbSendQuery(dblink, query)
library(spartan)
# Directory where the example simulation results for this technique were extracted
# (i.e. the results downloaded from the website)
FILEPATH <- "/home/user/AA"
# Sample sizes (number of simulation replicates in each distribution) to be analysed
SAMPLESIZES <- c(1, 5, 50, 100, 300)
# The simulation output measures to be analysed
MEASURES <- c("Velocity", "Displacement")
# Number of distributions being compared. Default: 20, as performed by Read et al
NUMSUBSETSPERSAMPLESIZE <- 20
# Output file name containing the simulation responses.
RESULTFILENAME <- "trackedCells_Close.csv"
# Not used in this case. Useful where two result files exist (e.g.\ if tracking cells
# close and those further away, two output files could be used). Here, results in a
# second file are processed if the first is blank or does not exist. Defaults to NULL
# if not specified
ALTFILENAME <- NULL
# Notes the column in the CSV results file where the results start.
# Useful as it restricts what is read in to R, getting round potential errors where
# the first column contains a label
OUTPUTFILECOLSTART <- 10
# Last column of the output measure results
OUTPUTFILECOLEND <- 11
# Use this if simulation results are in CSV format.
# Last column of the output measure results
OUTPUTFILECOLEND <- 11
# File either A: created by method 1 of this technique, containing the median of each
# output measure of each simulation run in that subset, or B: The name of the provided
# single CSV file containing the simulation responses. So if you are using the CSV
# structured tutorial data, this fill be the name of that CSV file.
MEDIANS_SUMMARY_FILE_NAME <- "AA_SimResponses.csv"
# The results of the A-Test comparisons of the twenty subsets for each sample size
# are stored within an output file. This parameter sets the name of this file.
# Note no file extension. Current versions of spartan output to CSV files
ATESTRESULTSFILENAME <- "AA_ATest_Scores.csv"
# A summary file is created containing the maximum and median
# A-Test values for each sample size. This parameter sets the name of this file.
SUMMARYFILENAME <- "AA_ATestMaxAndMedians.csv"
# The A-Test value either side of 0.5 which should be considered a 'large difference'
# between two sets of results. Use of 0.23 was taken from the Vargha-Delaney
# publication but can be adjusted here as necessary.
LARGEDIFFINDICATOR <- 0.23
# A-Test values above 0.5 (no difference) which should be considered as small,
# medium, and large differences between two result sets. Used in the graph
# summarising all sample sizes.
SMALL <- 0.56
MEDIUM <- 0.66
LARGE <- 0.73
# Name of the graph which summarises the analysis results for all sample sizes.
# Current versions of spartan output to pdf.
GRAPHOUTPUTFILE <- "AA_ATestMaxes.pdf"
FILEPATH<-"/home/kja505/Downloads/AA_Spartan2_July14/AA_Spartan2/Folder_Structured/"
aa_summariseReplicateRuns(FILEPATH, SAMPLESIZES, MEASURES, RESULTFILENAME, ALTFILENAME, OUTPUTFILECOLSTART, OUTPUTFILECOLEND, MEDIANS_SUMMARY_FILE_NAME)
devtools::load_all(".")
aa_summariseReplicateRuns(FILEPATH, SAMPLESIZES, MEASURES, RESULTFILENAME, ALTFILENAME, OUTPUTFILECOLSTART, OUTPUTFILECOLEND, MEDIANS_SUMMARY_FILE_NAME)
devtools::load_all(".")
aa_summariseReplicateRuns(FILEPATH, SAMPLESIZES, MEASURES, RESULTFILENAME, ALTFILENAME, OUTPUTFILECOLSTART, OUTPUTFILECOLEND, MEDIANS_SUMMARY_FILE_NAME)
devtools::load_all(".")
aa_summariseReplicateRuns(FILEPATH, SAMPLESIZES, MEASURES, RESULTFILENAME, ALTFILENAME, OUTPUTFILECOLSTART, OUTPUTFILECOLEND, MEDIANS_SUMMARY_FILE_NAME)
a_test_results <- aa_getATestResults(FILEPATH, SAMPLESIZES, NUMSUBSETSPERSAMPLESIZE, MEASURES, ATESTRESULTSFILENAME, LARGEDIFFINDICATOR, AA_SIM_RESULTS_FILE = MEDIANS_SUMMARY_FILE_NAME)
AA_SIM_RESULTS_FILE
MEDIANS_SUMMARY_FILE_NAME
devtools::load_all(".")
devtools::load_all(".")
a_test_results <- aa_getATestResults(FILEPATH, SAMPLESIZES, NUMSUBSETSPERSAMPLESIZE, MEASURES, ATESTRESULTSFILENAME, LARGEDIFFINDICATOR, AA_SIM_RESULTS_FILE = MEDIANS_SUMMARY_FILE_NAME)
sample_summary <- aa_sampleSizeSummary(FILEPATH, SAMPLESIZES, MEASURES, SUMMARYFILENAME, ATESTRESULTS_FILE = ATESTRESULTSFILENAME)
aa_graphSampleSizeSummary(FILEPATH, MEASURES, 300, SMALL, MEDIUM, LARGE, GRAPHOUTPUTFILE, SAMPLESUMMARY_FILE = SUMMARYFILENAME)
devtools::build()
devtools::load_all(".")
devtools::build()
devtools::load_all(".")
devtools::build()
devtools::load_all(".")
devtools::build()
library(shiny)
install.packages(shiny)
install.packages("shiny")
devtools::load_all(".")
devtools::build()
devtools::build()
devtools::build()
devtools::build()
devtools::build()
devtools::build()
devtools::build()
devtools::load_all(".")
devtools::build()
devtools::build()
devtools::build()
devtools::build()
library(spartan)
devtools::build()
devtools::build()
devtools::build()
devtools::build()
devtools::build()
devtools::load_all(".")
devtools::load_all(".")
devtools::test()
devtools::test()
devtools::test()
devtools::test()
setwd("/home/kja505/Dropbox/spartan_3.0/spartan/tests/testthat/")
b<-lhc_generate_lhc_sample_netlogo(FILEPATH=getwd(),
c("people","infectiousness","chance-recover","duration"),
c(150,"[10,90]","[10,90]","[5,40]"), 1, "normal",
1,"true", "setup", "go",
c("death-thru-sickness","death-but-immune","death-old-age",
"death-old-and-sick"))
file.exists(paste(getwd(),"/1/lhc_analysis_set1.xml",sep=""))
xmlFile<-"/home/kja505/Dropbox/spartan_3.0/spartan/tests/testthat/1/lhc_analysis_set1.xml"
csvFile<-"/home/kja505/Dropbox/spartan_3.0/spartan/tests/testthat/LHC_Parameters_for_Runs.csv"
library(XML)
doc = XML::xmlTreeParse(xmlFile, useInternalNodes = TRUE)
els = XML::getNodeSet(doc, "/experiments//metric")
all_metrics <- sapply(els, xmlValue)
xml_param_vals <- NULL
els = XML::getNodeSet(doc, "/experiments//enumeratedValueSet[@variable='infectiousness']//value[@value.infectiousness]")
sapply(els, function(el) xmlGetAttr(el, "value.infectiousnesss"))
xml_param_vals <- c(xml_param_vals, xmlAttrs(els[[1]])[[1]])
els
sapply(els, function(el) xmlGetAttr(el, "value.infectiousnesss"))
xmlAttrs(els[[1]])
els = XML::getNodeSet(doc, "/experiments//enumeratedValueSet[@variable='infectiousness']//value[@value.infectiousness]")
xmlAttrs(els[[1]])
xmlAttrs(els)
doc = XML::xmlTreeParse(xmlFile, useInternalNodes = TRUE)
els = XML::getNodeSet(doc, "/experiments//metric")
all_metrics <- sapply(els, xmlValue)
all_metrics
xml_param_vals <- NULL
els = XML::getNodeSet(doc, "/experiments//enumeratedValueSet[@variable='infectiousness']//value[@value.infectiousness]")
sapply(els, function(el) xmlGetAttr(el, "value.infectiousnesss"))
xml_param_vals <- c(xml_param_vals, xmlAttrs(els[[1]])[[1]])
b<-sapply(els, function(el) xmlGetAttr(el, "value.infectiousnesss"))
b
sapply(b,xmlValue)
xml_param_vals <- c(xml_param_vals, xmlAttrs(els[[1]])
)
els
xml_param_vals <- NULL
doc = XML::xmlTreeParse(xmlFile, useInternalNodes = TRUE)
els = XML::getNodeSet(doc, "/experiments//metric")
all_metrics <- sapply(els, xmlValue)
xml_param_vals <- NULL
els = XML::getNodeSet(doc, "/experiments//enumeratedValueSet[@variable='infectiousness']//value[@value.infectiousness]")
els
sapply(els,xmlGetAttr, "value")
toString(sapply(els,xmlGetAttr, "value"))
sapply(els,xmlGetAttr, "value")
sapply(els,xmlValue)
els
els[1]
els[2]
length(els)
typeof(els)
els = XML::getNodeSet(doc, "/experiments//enumeratedValueSet[@variable='infectiousness']")
els
els = XML::getNodeSet(doc, "/experiments//enumeratedValueSet[@variable='infectiousness']//value[@value.infectiousness]")
els
els[[1]]
length(els)
els = XML::getNodeSet(doc, "/experiments//enumeratedValueSet[@variable='infectiousness']
")"
"
els = XML::getNodeSet(doc, "/experiments//enumeratedValueSet[@variable='infectiousness']")
length(els)
els
sapply(els,function(el) xmlGetAttr(el, "value")
)
sapply(els,function(el) xmlGetAttr(el, "variable")
)
els = XML::getNodeSet(doc, "/experiments//enumeratedValueSet[@variable='infectiousness']//value[@value.infectiousness]")
sapply(els,function(el) xmlGetAttr(el, "value"))
els = XML::getNodeSet(doc, "/experiments//enumeratedValueSet[@variable='infectiousness']//value[@value]")
els
#els = XML::getNodeSet(doc, "/experiments//enumeratedValueSet[@variable='infectiousness']//value[@value.infectiousness]")
els = XML::getNodeSet(doc, "/experiments//enumeratedValueSet[@variable='infectiousness']//value[@value]")
b<-sapply(els, function(el) xmlGetAttr(el, "value.infectiousnesss"))
xml_param_vals <- c(xml_param_vals, xmlAttrs(els[[1]])[[1]])
#els = XML::getNodeSet(doc, "/experiments//enumeratedValueSet[@variable='chance-recover']//value[@value.chance-recover]")
els = XML::getNodeSet(doc, "/experiments//enumeratedValueSet[@variable='chance-recover']//value[@value]")
xml_param_vals <- c(xml_param_vals, xmlAttrs(els[[1]])[[1]])
#els = XML::getNodeSet(doc, "/experiments//enumeratedValueSet[@variable='duration']//value[@value.duration]")
els = XML::getNodeSet(doc, "/experiments//enumeratedValueSet[@variable='duration']//value[@value]")
xml_param_vals <- c(xml_param_vals, xmlAttrs(els[[1]])[[1]])
# People is a static value, recover this
els = XML::getNodeSet(doc, "/experiments//enumeratedValueSet[@variable='people']//value[@value]")
people <- as.numeric(xmlAttrs(els[[1]]))
xml_param_vals
xml_param_vals <- NULL
#els = XML::getNodeSet(doc, "/experiments//enumeratedValueSet[@variable='infectiousness']//value[@value.infectiousness]")
els = XML::getNodeSet(doc, "/experiments//enumeratedValueSet[@variable='infectiousness']//value[@value]")
b<-sapply(els, function(el) xmlGetAttr(el, "value.infectiousnesss"))
xml_param_vals <- c(xml_param_vals, xmlAttrs(els[[1]])[[1]])
#els = XML::getNodeSet(doc, "/experiments//enumeratedValueSet[@variable='chance-recover']//value[@value.chance-recover]")
els = XML::getNodeSet(doc, "/experiments//enumeratedValueSet[@variable='chance-recover']//value[@value]")
xml_param_vals <- c(xml_param_vals, xmlAttrs(els[[1]])[[1]])
xml_param_vals <- NULL
#els = XML::getNodeSet(doc, "/experiments//enumeratedValueSet[@variable='infectiousness']//value[@value.infectiousness]")
els = XML::getNodeSet(doc, "/experiments//enumeratedValueSet[@variable='infectiousness']//value[@value]")
#sapply(els, function(el) xmlGetAttr(el, "value.infectiousnesss"))
xml_param_vals <- c(xml_param_vals, xmlAttrs(els[[1]])[[1]])
xml_param_vals
#els = XML::getNodeSet(doc, "/experiments//enumeratedValueSet[@variable='chance-recover']//value[@value.chance-recover]")
els = XML::getNodeSet(doc, "/experiments//enumeratedValueSet[@variable='chance-recover']//value[@value]")
xml_param_vals <- c(xml_param_vals, xmlAttrs(els[[1]])[[1]])
#els = XML::getNodeSet(doc, "/experiments//enumeratedValueSet[@variable='duration']//value[@value.duration]")
els = XML::getNodeSet(doc, "/experiments//enumeratedValueSet[@variable='duration']//value[@value]")
xml_param_vals <- c(xml_param_vals, xmlAttrs(els[[1]])[[1]])
xml_param_vals
# People is a static value, recover this
els = XML::getNodeSet(doc, "/experiments//enumeratedValueSet[@variable='people']//value[@value]")
people <- as.numeric(xmlAttrs(els[[1]]))
# Read in the CSV sample file so we can check the values are correct
sample <- read.csv(csvFile,header=T)
devtools::load_all("~/Dropbox/spartan_3.0/spartan")
devtools::test()
devtools::test()
devtools::check()
